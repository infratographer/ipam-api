// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipblock"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipblocktype"
	"go.infratographer.com/ipam-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// IPBlockTypeQuery is the builder for querying IPBlockType entities.
type IPBlockTypeQuery struct {
	config
	ctx              *QueryContext
	order            []ipblocktype.OrderOption
	inters           []Interceptor
	predicates       []predicate.IPBlockType
	withIPBlock      *IPBlockQuery
	modifiers        []func(*sql.Selector)
	loadTotal        []func(context.Context, []*IPBlockType) error
	withNamedIPBlock map[string]*IPBlockQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IPBlockTypeQuery builder.
func (ibtq *IPBlockTypeQuery) Where(ps ...predicate.IPBlockType) *IPBlockTypeQuery {
	ibtq.predicates = append(ibtq.predicates, ps...)
	return ibtq
}

// Limit the number of records to be returned by this query.
func (ibtq *IPBlockTypeQuery) Limit(limit int) *IPBlockTypeQuery {
	ibtq.ctx.Limit = &limit
	return ibtq
}

// Offset to start from.
func (ibtq *IPBlockTypeQuery) Offset(offset int) *IPBlockTypeQuery {
	ibtq.ctx.Offset = &offset
	return ibtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ibtq *IPBlockTypeQuery) Unique(unique bool) *IPBlockTypeQuery {
	ibtq.ctx.Unique = &unique
	return ibtq
}

// Order specifies how the records should be ordered.
func (ibtq *IPBlockTypeQuery) Order(o ...ipblocktype.OrderOption) *IPBlockTypeQuery {
	ibtq.order = append(ibtq.order, o...)
	return ibtq
}

// QueryIPBlock chains the current query on the "ip_block" edge.
func (ibtq *IPBlockTypeQuery) QueryIPBlock() *IPBlockQuery {
	query := (&IPBlockClient{config: ibtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ibtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ibtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ipblocktype.Table, ipblocktype.FieldID, selector),
			sqlgraph.To(ipblock.Table, ipblock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ipblocktype.IPBlockTable, ipblocktype.IPBlockColumn),
		)
		fromU = sqlgraph.SetNeighbors(ibtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IPBlockType entity from the query.
// Returns a *NotFoundError when no IPBlockType was found.
func (ibtq *IPBlockTypeQuery) First(ctx context.Context) (*IPBlockType, error) {
	nodes, err := ibtq.Limit(1).All(setContextOp(ctx, ibtq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ipblocktype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ibtq *IPBlockTypeQuery) FirstX(ctx context.Context) *IPBlockType {
	node, err := ibtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IPBlockType ID from the query.
// Returns a *NotFoundError when no IPBlockType ID was found.
func (ibtq *IPBlockTypeQuery) FirstID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = ibtq.Limit(1).IDs(setContextOp(ctx, ibtq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ipblocktype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ibtq *IPBlockTypeQuery) FirstIDX(ctx context.Context) gidx.PrefixedID {
	id, err := ibtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IPBlockType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IPBlockType entity is found.
// Returns a *NotFoundError when no IPBlockType entities are found.
func (ibtq *IPBlockTypeQuery) Only(ctx context.Context) (*IPBlockType, error) {
	nodes, err := ibtq.Limit(2).All(setContextOp(ctx, ibtq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ipblocktype.Label}
	default:
		return nil, &NotSingularError{ipblocktype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ibtq *IPBlockTypeQuery) OnlyX(ctx context.Context) *IPBlockType {
	node, err := ibtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IPBlockType ID in the query.
// Returns a *NotSingularError when more than one IPBlockType ID is found.
// Returns a *NotFoundError when no entities are found.
func (ibtq *IPBlockTypeQuery) OnlyID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = ibtq.Limit(2).IDs(setContextOp(ctx, ibtq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ipblocktype.Label}
	default:
		err = &NotSingularError{ipblocktype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ibtq *IPBlockTypeQuery) OnlyIDX(ctx context.Context) gidx.PrefixedID {
	id, err := ibtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IPBlockTypes.
func (ibtq *IPBlockTypeQuery) All(ctx context.Context) ([]*IPBlockType, error) {
	ctx = setContextOp(ctx, ibtq.ctx, "All")
	if err := ibtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IPBlockType, *IPBlockTypeQuery]()
	return withInterceptors[[]*IPBlockType](ctx, ibtq, qr, ibtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ibtq *IPBlockTypeQuery) AllX(ctx context.Context) []*IPBlockType {
	nodes, err := ibtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IPBlockType IDs.
func (ibtq *IPBlockTypeQuery) IDs(ctx context.Context) (ids []gidx.PrefixedID, err error) {
	if ibtq.ctx.Unique == nil && ibtq.path != nil {
		ibtq.Unique(true)
	}
	ctx = setContextOp(ctx, ibtq.ctx, "IDs")
	if err = ibtq.Select(ipblocktype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ibtq *IPBlockTypeQuery) IDsX(ctx context.Context) []gidx.PrefixedID {
	ids, err := ibtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ibtq *IPBlockTypeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ibtq.ctx, "Count")
	if err := ibtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ibtq, querierCount[*IPBlockTypeQuery](), ibtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ibtq *IPBlockTypeQuery) CountX(ctx context.Context) int {
	count, err := ibtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ibtq *IPBlockTypeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ibtq.ctx, "Exist")
	switch _, err := ibtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ibtq *IPBlockTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := ibtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IPBlockTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ibtq *IPBlockTypeQuery) Clone() *IPBlockTypeQuery {
	if ibtq == nil {
		return nil
	}
	return &IPBlockTypeQuery{
		config:      ibtq.config,
		ctx:         ibtq.ctx.Clone(),
		order:       append([]ipblocktype.OrderOption{}, ibtq.order...),
		inters:      append([]Interceptor{}, ibtq.inters...),
		predicates:  append([]predicate.IPBlockType{}, ibtq.predicates...),
		withIPBlock: ibtq.withIPBlock.Clone(),
		// clone intermediate query.
		sql:  ibtq.sql.Clone(),
		path: ibtq.path,
	}
}

// WithIPBlock tells the query-builder to eager-load the nodes that are connected to
// the "ip_block" edge. The optional arguments are used to configure the query builder of the edge.
func (ibtq *IPBlockTypeQuery) WithIPBlock(opts ...func(*IPBlockQuery)) *IPBlockTypeQuery {
	query := (&IPBlockClient{config: ibtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ibtq.withIPBlock = query
	return ibtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IPBlockType.Query().
//		GroupBy(ipblocktype.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (ibtq *IPBlockTypeQuery) GroupBy(field string, fields ...string) *IPBlockTypeGroupBy {
	ibtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IPBlockTypeGroupBy{build: ibtq}
	grbuild.flds = &ibtq.ctx.Fields
	grbuild.label = ipblocktype.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.IPBlockType.Query().
//		Select(ipblocktype.FieldCreatedAt).
//		Scan(ctx, &v)
func (ibtq *IPBlockTypeQuery) Select(fields ...string) *IPBlockTypeSelect {
	ibtq.ctx.Fields = append(ibtq.ctx.Fields, fields...)
	sbuild := &IPBlockTypeSelect{IPBlockTypeQuery: ibtq}
	sbuild.label = ipblocktype.Label
	sbuild.flds, sbuild.scan = &ibtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IPBlockTypeSelect configured with the given aggregations.
func (ibtq *IPBlockTypeQuery) Aggregate(fns ...AggregateFunc) *IPBlockTypeSelect {
	return ibtq.Select().Aggregate(fns...)
}

func (ibtq *IPBlockTypeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ibtq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ibtq); err != nil {
				return err
			}
		}
	}
	for _, f := range ibtq.ctx.Fields {
		if !ipblocktype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if ibtq.path != nil {
		prev, err := ibtq.path(ctx)
		if err != nil {
			return err
		}
		ibtq.sql = prev
	}
	return nil
}

func (ibtq *IPBlockTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IPBlockType, error) {
	var (
		nodes       = []*IPBlockType{}
		_spec       = ibtq.querySpec()
		loadedTypes = [1]bool{
			ibtq.withIPBlock != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IPBlockType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IPBlockType{config: ibtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ibtq.modifiers) > 0 {
		_spec.Modifiers = ibtq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ibtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ibtq.withIPBlock; query != nil {
		if err := ibtq.loadIPBlock(ctx, query, nodes,
			func(n *IPBlockType) { n.Edges.IPBlock = []*IPBlock{} },
			func(n *IPBlockType, e *IPBlock) { n.Edges.IPBlock = append(n.Edges.IPBlock, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ibtq.withNamedIPBlock {
		if err := ibtq.loadIPBlock(ctx, query, nodes,
			func(n *IPBlockType) { n.appendNamedIPBlock(name) },
			func(n *IPBlockType, e *IPBlock) { n.appendNamedIPBlock(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range ibtq.loadTotal {
		if err := ibtq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ibtq *IPBlockTypeQuery) loadIPBlock(ctx context.Context, query *IPBlockQuery, nodes []*IPBlockType, init func(*IPBlockType), assign func(*IPBlockType, *IPBlock)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[gidx.PrefixedID]*IPBlockType)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(ipblock.FieldBlockTypeID)
	}
	query.Where(predicate.IPBlock(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(ipblocktype.IPBlockColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.BlockTypeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "block_type_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ibtq *IPBlockTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ibtq.querySpec()
	if len(ibtq.modifiers) > 0 {
		_spec.Modifiers = ibtq.modifiers
	}
	_spec.Node.Columns = ibtq.ctx.Fields
	if len(ibtq.ctx.Fields) > 0 {
		_spec.Unique = ibtq.ctx.Unique != nil && *ibtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ibtq.driver, _spec)
}

func (ibtq *IPBlockTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(ipblocktype.Table, ipblocktype.Columns, sqlgraph.NewFieldSpec(ipblocktype.FieldID, field.TypeString))
	_spec.From = ibtq.sql
	if unique := ibtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ibtq.path != nil {
		_spec.Unique = true
	}
	if fields := ibtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipblocktype.FieldID)
		for i := range fields {
			if fields[i] != ipblocktype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ibtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ibtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ibtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ibtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ibtq *IPBlockTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ibtq.driver.Dialect())
	t1 := builder.Table(ipblocktype.Table)
	columns := ibtq.ctx.Fields
	if len(columns) == 0 {
		columns = ipblocktype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ibtq.sql != nil {
		selector = ibtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ibtq.ctx.Unique != nil && *ibtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ibtq.predicates {
		p(selector)
	}
	for _, p := range ibtq.order {
		p(selector)
	}
	if offset := ibtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ibtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedIPBlock tells the query-builder to eager-load the nodes that are connected to the "ip_block"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ibtq *IPBlockTypeQuery) WithNamedIPBlock(name string, opts ...func(*IPBlockQuery)) *IPBlockTypeQuery {
	query := (&IPBlockClient{config: ibtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ibtq.withNamedIPBlock == nil {
		ibtq.withNamedIPBlock = make(map[string]*IPBlockQuery)
	}
	ibtq.withNamedIPBlock[name] = query
	return ibtq
}

// IPBlockTypeGroupBy is the group-by builder for IPBlockType entities.
type IPBlockTypeGroupBy struct {
	selector
	build *IPBlockTypeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ibtgb *IPBlockTypeGroupBy) Aggregate(fns ...AggregateFunc) *IPBlockTypeGroupBy {
	ibtgb.fns = append(ibtgb.fns, fns...)
	return ibtgb
}

// Scan applies the selector query and scans the result into the given value.
func (ibtgb *IPBlockTypeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ibtgb.build.ctx, "GroupBy")
	if err := ibtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IPBlockTypeQuery, *IPBlockTypeGroupBy](ctx, ibtgb.build, ibtgb, ibtgb.build.inters, v)
}

func (ibtgb *IPBlockTypeGroupBy) sqlScan(ctx context.Context, root *IPBlockTypeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ibtgb.fns))
	for _, fn := range ibtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ibtgb.flds)+len(ibtgb.fns))
		for _, f := range *ibtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ibtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ibtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IPBlockTypeSelect is the builder for selecting fields of IPBlockType entities.
type IPBlockTypeSelect struct {
	*IPBlockTypeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ibts *IPBlockTypeSelect) Aggregate(fns ...AggregateFunc) *IPBlockTypeSelect {
	ibts.fns = append(ibts.fns, fns...)
	return ibts
}

// Scan applies the selector query and scans the result into the given value.
func (ibts *IPBlockTypeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ibts.ctx, "Select")
	if err := ibts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IPBlockTypeQuery, *IPBlockTypeSelect](ctx, ibts.IPBlockTypeQuery, ibts, ibts.inters, v)
}

func (ibts *IPBlockTypeSelect) sqlScan(ctx context.Context, root *IPBlockTypeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ibts.fns))
	for _, fn := range ibts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ibts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ibts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
