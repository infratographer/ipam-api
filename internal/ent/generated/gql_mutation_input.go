// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"go.infratographer.com/x/gidx"
)

// CreateIPAddressInput represents a mutation input for creating ipaddresses.
type CreateIPAddressInput struct {
	IP          string
	NodeID      gidx.PrefixedID
	NodeOwnerID gidx.PrefixedID
	Reserved    *bool
	IPBlockID   gidx.PrefixedID
}

// Mutate applies the CreateIPAddressInput on the IPAddressMutation builder.
func (i *CreateIPAddressInput) Mutate(m *IPAddressMutation) {
	m.SetIP(i.IP)
	m.SetNodeID(i.NodeID)
	m.SetNodeOwnerID(i.NodeOwnerID)
	if v := i.Reserved; v != nil {
		m.SetReserved(*v)
	}
	m.SetIPBlockID(i.IPBlockID)
}

// SetInput applies the change-set in the CreateIPAddressInput on the IPAddressCreate builder.
func (c *IPAddressCreate) SetInput(i CreateIPAddressInput) *IPAddressCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateIPAddressInput represents a mutation input for updating ipaddresses.
type UpdateIPAddressInput struct {
	IP       *string
	Reserved *bool
}

// Mutate applies the UpdateIPAddressInput on the IPAddressMutation builder.
func (i *UpdateIPAddressInput) Mutate(m *IPAddressMutation) {
	if v := i.IP; v != nil {
		m.SetIP(*v)
	}
	if v := i.Reserved; v != nil {
		m.SetReserved(*v)
	}
}

// SetInput applies the change-set in the UpdateIPAddressInput on the IPAddressUpdate builder.
func (c *IPAddressUpdate) SetInput(i UpdateIPAddressInput) *IPAddressUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateIPAddressInput on the IPAddressUpdateOne builder.
func (c *IPAddressUpdateOne) SetInput(i UpdateIPAddressInput) *IPAddressUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateIPBlockInput represents a mutation input for creating ipblocks.
type CreateIPBlockInput struct {
	Prefix            string
	LocationID        gidx.PrefixedID
	ParentBlockID     gidx.PrefixedID
	AllowAutoSubnet   *bool
	AllowAutoAllocate *bool
	IPBlockTypeID     gidx.PrefixedID
}

// Mutate applies the CreateIPBlockInput on the IPBlockMutation builder.
func (i *CreateIPBlockInput) Mutate(m *IPBlockMutation) {
	m.SetPrefix(i.Prefix)
	m.SetLocationID(i.LocationID)
	m.SetParentBlockID(i.ParentBlockID)
	if v := i.AllowAutoSubnet; v != nil {
		m.SetAllowAutoSubnet(*v)
	}
	if v := i.AllowAutoAllocate; v != nil {
		m.SetAllowAutoAllocate(*v)
	}
	m.SetIPBlockTypeID(i.IPBlockTypeID)
}

// SetInput applies the change-set in the CreateIPBlockInput on the IPBlockCreate builder.
func (c *IPBlockCreate) SetInput(i CreateIPBlockInput) *IPBlockCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateIPBlockInput represents a mutation input for updating ipblocks.
type UpdateIPBlockInput struct {
	Prefix            *string
	AllowAutoSubnet   *bool
	AllowAutoAllocate *bool
}

// Mutate applies the UpdateIPBlockInput on the IPBlockMutation builder.
func (i *UpdateIPBlockInput) Mutate(m *IPBlockMutation) {
	if v := i.Prefix; v != nil {
		m.SetPrefix(*v)
	}
	if v := i.AllowAutoSubnet; v != nil {
		m.SetAllowAutoSubnet(*v)
	}
	if v := i.AllowAutoAllocate; v != nil {
		m.SetAllowAutoAllocate(*v)
	}
}

// SetInput applies the change-set in the UpdateIPBlockInput on the IPBlockUpdate builder.
func (c *IPBlockUpdate) SetInput(i UpdateIPBlockInput) *IPBlockUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateIPBlockInput on the IPBlockUpdateOne builder.
func (c *IPBlockUpdateOne) SetInput(i UpdateIPBlockInput) *IPBlockUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateIPBlockTypeInput represents a mutation input for creating ipblocktypes.
type CreateIPBlockTypeInput struct {
	Name    string
	OwnerID gidx.PrefixedID
}

// Mutate applies the CreateIPBlockTypeInput on the IPBlockTypeMutation builder.
func (i *CreateIPBlockTypeInput) Mutate(m *IPBlockTypeMutation) {
	m.SetName(i.Name)
	m.SetOwnerID(i.OwnerID)
}

// SetInput applies the change-set in the CreateIPBlockTypeInput on the IPBlockTypeCreate builder.
func (c *IPBlockTypeCreate) SetInput(i CreateIPBlockTypeInput) *IPBlockTypeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateIPBlockTypeInput represents a mutation input for updating ipblocktypes.
type UpdateIPBlockTypeInput struct {
	Name *string
}

// Mutate applies the UpdateIPBlockTypeInput on the IPBlockTypeMutation builder.
func (i *UpdateIPBlockTypeInput) Mutate(m *IPBlockTypeMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateIPBlockTypeInput on the IPBlockTypeUpdate builder.
func (c *IPBlockTypeUpdate) SetInput(i UpdateIPBlockTypeInput) *IPBlockTypeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateIPBlockTypeInput on the IPBlockTypeUpdateOne builder.
func (c *IPBlockTypeUpdateOne) SetInput(i UpdateIPBlockTypeInput) *IPBlockTypeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
