// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipblock"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipblocktype"
	"go.infratographer.com/x/gidx"
)

// Represents an ip block node on the graph.
type IPBlock struct {
	config `json:"-"`
	// ID of the ent.
	// The ID of the IP Block.
	ID gidx.PrefixedID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The prefix of the ip block.
	Prefix string `json:"prefix,omitempty"`
	// The ID for the block type for this ip block.
	BlockTypeID gidx.PrefixedID `json:"block_type_id,omitempty"`
	// The ID for the location for this ip block.
	LocationID gidx.PrefixedID `json:"location_id,omitempty"`
	// The ID for the parent of this ip block.
	ParentBlockID gidx.PrefixedID `json:"parent_block_id,omitempty"`
	// Allow carving this block into smaller subnets.
	AllowAutoSubnet bool `json:"allow_auto_subnet,omitempty"`
	// Allow automatically assigning IPs directly from this block.
	AllowAutoAllocate bool `json:"allow_auto_allocate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IPBlockQuery when eager-loading is set.
	Edges        IPBlockEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IPBlockEdges holds the relations/edges for other nodes in the graph.
type IPBlockEdges struct {
	// IPBlockType holds the value of the ip_block_type edge.
	IPBlockType *IPBlockType `json:"ip_block_type,omitempty"`
	// IPAddress holds the value of the ip_address edge.
	IPAddress []*IPAddress `json:"ip_address,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedIPAddress map[string][]*IPAddress
}

// IPBlockTypeOrErr returns the IPBlockType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IPBlockEdges) IPBlockTypeOrErr() (*IPBlockType, error) {
	if e.loadedTypes[0] {
		if e.IPBlockType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ipblocktype.Label}
		}
		return e.IPBlockType, nil
	}
	return nil, &NotLoadedError{edge: "ip_block_type"}
}

// IPAddressOrErr returns the IPAddress value or an error if the edge
// was not loaded in eager-loading.
func (e IPBlockEdges) IPAddressOrErr() ([]*IPAddress, error) {
	if e.loadedTypes[1] {
		return e.IPAddress, nil
	}
	return nil, &NotLoadedError{edge: "ip_address"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IPBlock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ipblock.FieldID, ipblock.FieldBlockTypeID, ipblock.FieldLocationID, ipblock.FieldParentBlockID:
			values[i] = new(gidx.PrefixedID)
		case ipblock.FieldAllowAutoSubnet, ipblock.FieldAllowAutoAllocate:
			values[i] = new(sql.NullBool)
		case ipblock.FieldPrefix:
			values[i] = new(sql.NullString)
		case ipblock.FieldCreatedAt, ipblock.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IPBlock fields.
func (ib *IPBlock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ipblock.FieldID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ib.ID = *value
			}
		case ipblock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ib.CreatedAt = value.Time
			}
		case ipblock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ib.UpdatedAt = value.Time
			}
		case ipblock.FieldPrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefix", values[i])
			} else if value.Valid {
				ib.Prefix = value.String
			}
		case ipblock.FieldBlockTypeID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field block_type_id", values[i])
			} else if value != nil {
				ib.BlockTypeID = *value
			}
		case ipblock.FieldLocationID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[i])
			} else if value != nil {
				ib.LocationID = *value
			}
		case ipblock.FieldParentBlockID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_block_id", values[i])
			} else if value != nil {
				ib.ParentBlockID = *value
			}
		case ipblock.FieldAllowAutoSubnet:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_auto_subnet", values[i])
			} else if value.Valid {
				ib.AllowAutoSubnet = value.Bool
			}
		case ipblock.FieldAllowAutoAllocate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_auto_allocate", values[i])
			} else if value.Valid {
				ib.AllowAutoAllocate = value.Bool
			}
		default:
			ib.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IPBlock.
// This includes values selected through modifiers, order, etc.
func (ib *IPBlock) Value(name string) (ent.Value, error) {
	return ib.selectValues.Get(name)
}

// QueryIPBlockType queries the "ip_block_type" edge of the IPBlock entity.
func (ib *IPBlock) QueryIPBlockType() *IPBlockTypeQuery {
	return NewIPBlockClient(ib.config).QueryIPBlockType(ib)
}

// QueryIPAddress queries the "ip_address" edge of the IPBlock entity.
func (ib *IPBlock) QueryIPAddress() *IPAddressQuery {
	return NewIPBlockClient(ib.config).QueryIPAddress(ib)
}

// Update returns a builder for updating this IPBlock.
// Note that you need to call IPBlock.Unwrap() before calling this method if this IPBlock
// was returned from a transaction, and the transaction was committed or rolled back.
func (ib *IPBlock) Update() *IPBlockUpdateOne {
	return NewIPBlockClient(ib.config).UpdateOne(ib)
}

// Unwrap unwraps the IPBlock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ib *IPBlock) Unwrap() *IPBlock {
	_tx, ok := ib.config.driver.(*txDriver)
	if !ok {
		panic("generated: IPBlock is not a transactional entity")
	}
	ib.config.driver = _tx.drv
	return ib
}

// String implements the fmt.Stringer.
func (ib *IPBlock) String() string {
	var builder strings.Builder
	builder.WriteString("IPBlock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ib.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ib.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ib.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("prefix=")
	builder.WriteString(ib.Prefix)
	builder.WriteString(", ")
	builder.WriteString("block_type_id=")
	builder.WriteString(fmt.Sprintf("%v", ib.BlockTypeID))
	builder.WriteString(", ")
	builder.WriteString("location_id=")
	builder.WriteString(fmt.Sprintf("%v", ib.LocationID))
	builder.WriteString(", ")
	builder.WriteString("parent_block_id=")
	builder.WriteString(fmt.Sprintf("%v", ib.ParentBlockID))
	builder.WriteString(", ")
	builder.WriteString("allow_auto_subnet=")
	builder.WriteString(fmt.Sprintf("%v", ib.AllowAutoSubnet))
	builder.WriteString(", ")
	builder.WriteString("allow_auto_allocate=")
	builder.WriteString(fmt.Sprintf("%v", ib.AllowAutoAllocate))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (ib IPBlock) IsEntity() {}

// NamedIPAddress returns the IPAddress named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ib *IPBlock) NamedIPAddress(name string) ([]*IPAddress, error) {
	if ib.Edges.namedIPAddress == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ib.Edges.namedIPAddress[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ib *IPBlock) appendNamedIPAddress(name string, edges ...*IPAddress) {
	if ib.Edges.namedIPAddress == nil {
		ib.Edges.namedIPAddress = make(map[string][]*IPAddress)
	}
	if len(edges) == 0 {
		ib.Edges.namedIPAddress[name] = []*IPAddress{}
	} else {
		ib.Edges.namedIPAddress[name] = append(ib.Edges.namedIPAddress[name], edges...)
	}
}

// IPBlocks is a parsable slice of IPBlock.
type IPBlocks []*IPBlock
