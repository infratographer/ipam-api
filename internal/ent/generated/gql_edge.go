// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ia *IPAddress) IPBlock(ctx context.Context) (*IPBlock, error) {
	result, err := ia.Edges.IPBlockOrErr()
	if IsNotLoaded(err) {
		result, err = ia.QueryIPBlock().Only(ctx)
	}
	return result, err
}

func (ib *IPBlock) IPBlockType(ctx context.Context) (*IPBlockType, error) {
	result, err := ib.Edges.IPBlockTypeOrErr()
	if IsNotLoaded(err) {
		result, err = ib.QueryIPBlockType().Only(ctx)
	}
	return result, err
}

func (ib *IPBlock) IPAddress(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *IPAddressOrder, where *IPAddressWhereInput,
) (*IPAddressConnection, error) {
	opts := []IPAddressPaginateOption{
		WithIPAddressOrder(orderBy),
		WithIPAddressFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ib.Edges.totalCount[1][alias]
	if nodes, err := ib.NamedIPAddress(alias); err == nil || hasTotalCount {
		pager, err := newIPAddressPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &IPAddressConnection{Edges: []*IPAddressEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ib.QueryIPAddress().Paginate(ctx, after, first, before, last, opts...)
}

func (ibt *IPBlockType) IPBlock(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *IPBlockOrder, where *IPBlockWhereInput,
) (*IPBlockConnection, error) {
	opts := []IPBlockPaginateOption{
		WithIPBlockOrder(orderBy),
		WithIPBlockFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ibt.Edges.totalCount[0][alias]
	if nodes, err := ibt.NamedIPBlock(alias); err == nil || hasTotalCount {
		pager, err := newIPBlockPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &IPBlockConnection{Edges: []*IPBlockEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ibt.QueryIPBlock().Paginate(ctx, after, first, before, last, opts...)
}
