// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ipblock

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/ipam-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// ID filters vertices based on their ID field.
func ID(id gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldUpdatedAt, v))
}

// Prefix applies equality check predicate on the "prefix" field. It's identical to PrefixEQ.
func Prefix(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldPrefix, v))
}

// BlockTypeID applies equality check predicate on the "block_type_id" field. It's identical to BlockTypeIDEQ.
func BlockTypeID(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldBlockTypeID, v))
}

// LocationID applies equality check predicate on the "location_id" field. It's identical to LocationIDEQ.
func LocationID(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldLocationID, v))
}

// ParentBlockID applies equality check predicate on the "parent_block_id" field. It's identical to ParentBlockIDEQ.
func ParentBlockID(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldParentBlockID, v))
}

// AllowAutoSubnet applies equality check predicate on the "allow_auto_subnet" field. It's identical to AllowAutoSubnetEQ.
func AllowAutoSubnet(v bool) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldAllowAutoSubnet, v))
}

// AllowAutoAllocate applies equality check predicate on the "allow_auto_allocate" field. It's identical to AllowAutoAllocateEQ.
func AllowAutoAllocate(v bool) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldAllowAutoAllocate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLTE(FieldUpdatedAt, v))
}

// PrefixEQ applies the EQ predicate on the "prefix" field.
func PrefixEQ(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldPrefix, v))
}

// PrefixNEQ applies the NEQ predicate on the "prefix" field.
func PrefixNEQ(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNEQ(FieldPrefix, v))
}

// PrefixIn applies the In predicate on the "prefix" field.
func PrefixIn(vs ...string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldIn(FieldPrefix, vs...))
}

// PrefixNotIn applies the NotIn predicate on the "prefix" field.
func PrefixNotIn(vs ...string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNotIn(FieldPrefix, vs...))
}

// PrefixGT applies the GT predicate on the "prefix" field.
func PrefixGT(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGT(FieldPrefix, v))
}

// PrefixGTE applies the GTE predicate on the "prefix" field.
func PrefixGTE(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGTE(FieldPrefix, v))
}

// PrefixLT applies the LT predicate on the "prefix" field.
func PrefixLT(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLT(FieldPrefix, v))
}

// PrefixLTE applies the LTE predicate on the "prefix" field.
func PrefixLTE(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLTE(FieldPrefix, v))
}

// PrefixContains applies the Contains predicate on the "prefix" field.
func PrefixContains(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldContains(FieldPrefix, v))
}

// PrefixHasPrefix applies the HasPrefix predicate on the "prefix" field.
func PrefixHasPrefix(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldHasPrefix(FieldPrefix, v))
}

// PrefixHasSuffix applies the HasSuffix predicate on the "prefix" field.
func PrefixHasSuffix(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldHasSuffix(FieldPrefix, v))
}

// PrefixEqualFold applies the EqualFold predicate on the "prefix" field.
func PrefixEqualFold(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEqualFold(FieldPrefix, v))
}

// PrefixContainsFold applies the ContainsFold predicate on the "prefix" field.
func PrefixContainsFold(v string) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldContainsFold(FieldPrefix, v))
}

// BlockTypeIDEQ applies the EQ predicate on the "block_type_id" field.
func BlockTypeIDEQ(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldBlockTypeID, v))
}

// BlockTypeIDNEQ applies the NEQ predicate on the "block_type_id" field.
func BlockTypeIDNEQ(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNEQ(FieldBlockTypeID, v))
}

// BlockTypeIDIn applies the In predicate on the "block_type_id" field.
func BlockTypeIDIn(vs ...gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldIn(FieldBlockTypeID, vs...))
}

// BlockTypeIDNotIn applies the NotIn predicate on the "block_type_id" field.
func BlockTypeIDNotIn(vs ...gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNotIn(FieldBlockTypeID, vs...))
}

// BlockTypeIDGT applies the GT predicate on the "block_type_id" field.
func BlockTypeIDGT(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGT(FieldBlockTypeID, v))
}

// BlockTypeIDGTE applies the GTE predicate on the "block_type_id" field.
func BlockTypeIDGTE(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGTE(FieldBlockTypeID, v))
}

// BlockTypeIDLT applies the LT predicate on the "block_type_id" field.
func BlockTypeIDLT(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLT(FieldBlockTypeID, v))
}

// BlockTypeIDLTE applies the LTE predicate on the "block_type_id" field.
func BlockTypeIDLTE(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLTE(FieldBlockTypeID, v))
}

// BlockTypeIDContains applies the Contains predicate on the "block_type_id" field.
func BlockTypeIDContains(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldContains(FieldBlockTypeID, vc))
}

// BlockTypeIDHasPrefix applies the HasPrefix predicate on the "block_type_id" field.
func BlockTypeIDHasPrefix(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldHasPrefix(FieldBlockTypeID, vc))
}

// BlockTypeIDHasSuffix applies the HasSuffix predicate on the "block_type_id" field.
func BlockTypeIDHasSuffix(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldHasSuffix(FieldBlockTypeID, vc))
}

// BlockTypeIDEqualFold applies the EqualFold predicate on the "block_type_id" field.
func BlockTypeIDEqualFold(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldEqualFold(FieldBlockTypeID, vc))
}

// BlockTypeIDContainsFold applies the ContainsFold predicate on the "block_type_id" field.
func BlockTypeIDContainsFold(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldContainsFold(FieldBlockTypeID, vc))
}

// LocationIDEQ applies the EQ predicate on the "location_id" field.
func LocationIDEQ(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldLocationID, v))
}

// LocationIDNEQ applies the NEQ predicate on the "location_id" field.
func LocationIDNEQ(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNEQ(FieldLocationID, v))
}

// LocationIDIn applies the In predicate on the "location_id" field.
func LocationIDIn(vs ...gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldIn(FieldLocationID, vs...))
}

// LocationIDNotIn applies the NotIn predicate on the "location_id" field.
func LocationIDNotIn(vs ...gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNotIn(FieldLocationID, vs...))
}

// LocationIDGT applies the GT predicate on the "location_id" field.
func LocationIDGT(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGT(FieldLocationID, v))
}

// LocationIDGTE applies the GTE predicate on the "location_id" field.
func LocationIDGTE(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGTE(FieldLocationID, v))
}

// LocationIDLT applies the LT predicate on the "location_id" field.
func LocationIDLT(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLT(FieldLocationID, v))
}

// LocationIDLTE applies the LTE predicate on the "location_id" field.
func LocationIDLTE(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLTE(FieldLocationID, v))
}

// LocationIDContains applies the Contains predicate on the "location_id" field.
func LocationIDContains(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldContains(FieldLocationID, vc))
}

// LocationIDHasPrefix applies the HasPrefix predicate on the "location_id" field.
func LocationIDHasPrefix(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldHasPrefix(FieldLocationID, vc))
}

// LocationIDHasSuffix applies the HasSuffix predicate on the "location_id" field.
func LocationIDHasSuffix(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldHasSuffix(FieldLocationID, vc))
}

// LocationIDEqualFold applies the EqualFold predicate on the "location_id" field.
func LocationIDEqualFold(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldEqualFold(FieldLocationID, vc))
}

// LocationIDContainsFold applies the ContainsFold predicate on the "location_id" field.
func LocationIDContainsFold(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldContainsFold(FieldLocationID, vc))
}

// ParentBlockIDEQ applies the EQ predicate on the "parent_block_id" field.
func ParentBlockIDEQ(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldParentBlockID, v))
}

// ParentBlockIDNEQ applies the NEQ predicate on the "parent_block_id" field.
func ParentBlockIDNEQ(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNEQ(FieldParentBlockID, v))
}

// ParentBlockIDIn applies the In predicate on the "parent_block_id" field.
func ParentBlockIDIn(vs ...gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldIn(FieldParentBlockID, vs...))
}

// ParentBlockIDNotIn applies the NotIn predicate on the "parent_block_id" field.
func ParentBlockIDNotIn(vs ...gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNotIn(FieldParentBlockID, vs...))
}

// ParentBlockIDGT applies the GT predicate on the "parent_block_id" field.
func ParentBlockIDGT(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGT(FieldParentBlockID, v))
}

// ParentBlockIDGTE applies the GTE predicate on the "parent_block_id" field.
func ParentBlockIDGTE(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldGTE(FieldParentBlockID, v))
}

// ParentBlockIDLT applies the LT predicate on the "parent_block_id" field.
func ParentBlockIDLT(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLT(FieldParentBlockID, v))
}

// ParentBlockIDLTE applies the LTE predicate on the "parent_block_id" field.
func ParentBlockIDLTE(v gidx.PrefixedID) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldLTE(FieldParentBlockID, v))
}

// ParentBlockIDContains applies the Contains predicate on the "parent_block_id" field.
func ParentBlockIDContains(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldContains(FieldParentBlockID, vc))
}

// ParentBlockIDHasPrefix applies the HasPrefix predicate on the "parent_block_id" field.
func ParentBlockIDHasPrefix(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldHasPrefix(FieldParentBlockID, vc))
}

// ParentBlockIDHasSuffix applies the HasSuffix predicate on the "parent_block_id" field.
func ParentBlockIDHasSuffix(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldHasSuffix(FieldParentBlockID, vc))
}

// ParentBlockIDEqualFold applies the EqualFold predicate on the "parent_block_id" field.
func ParentBlockIDEqualFold(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldEqualFold(FieldParentBlockID, vc))
}

// ParentBlockIDContainsFold applies the ContainsFold predicate on the "parent_block_id" field.
func ParentBlockIDContainsFold(v gidx.PrefixedID) predicate.IPBlock {
	vc := string(v)
	return predicate.IPBlock(sql.FieldContainsFold(FieldParentBlockID, vc))
}

// AllowAutoSubnetEQ applies the EQ predicate on the "allow_auto_subnet" field.
func AllowAutoSubnetEQ(v bool) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldAllowAutoSubnet, v))
}

// AllowAutoSubnetNEQ applies the NEQ predicate on the "allow_auto_subnet" field.
func AllowAutoSubnetNEQ(v bool) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNEQ(FieldAllowAutoSubnet, v))
}

// AllowAutoAllocateEQ applies the EQ predicate on the "allow_auto_allocate" field.
func AllowAutoAllocateEQ(v bool) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldEQ(FieldAllowAutoAllocate, v))
}

// AllowAutoAllocateNEQ applies the NEQ predicate on the "allow_auto_allocate" field.
func AllowAutoAllocateNEQ(v bool) predicate.IPBlock {
	return predicate.IPBlock(sql.FieldNEQ(FieldAllowAutoAllocate, v))
}

// HasIPBlockType applies the HasEdge predicate on the "ip_block_type" edge.
func HasIPBlockType() predicate.IPBlock {
	return predicate.IPBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, IPBlockTypeTable, IPBlockTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIPBlockTypeWith applies the HasEdge predicate on the "ip_block_type" edge with a given conditions (other predicates).
func HasIPBlockTypeWith(preds ...predicate.IPBlockType) predicate.IPBlock {
	return predicate.IPBlock(func(s *sql.Selector) {
		step := newIPBlockTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIPAddress applies the HasEdge predicate on the "ip_address" edge.
func HasIPAddress() predicate.IPBlock {
	return predicate.IPBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, IPAddressTable, IPAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIPAddressWith applies the HasEdge predicate on the "ip_address" edge with a given conditions (other predicates).
func HasIPAddressWith(preds ...predicate.IPAddress) predicate.IPBlock {
	return predicate.IPBlock(func(s *sql.Selector) {
		step := newIPAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IPBlock) predicate.IPBlock {
	return predicate.IPBlock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IPBlock) predicate.IPBlock {
	return predicate.IPBlock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IPBlock) predicate.IPBlock {
	return predicate.IPBlock(sql.NotPredicates(p))
}
