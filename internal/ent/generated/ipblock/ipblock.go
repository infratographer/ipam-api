// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ipblock

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/x/gidx"
)

const (
	// Label holds the string label denoting the ipblock type in the database.
	Label = "ip_block"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPrefix holds the string denoting the prefix field in the database.
	FieldPrefix = "prefix"
	// FieldBlockTypeID holds the string denoting the block_type_id field in the database.
	FieldBlockTypeID = "block_type_id"
	// FieldLocationID holds the string denoting the location_id field in the database.
	FieldLocationID = "location_id"
	// FieldParentBlockID holds the string denoting the parent_block_id field in the database.
	FieldParentBlockID = "parent_block_id"
	// FieldAllowAutoSubnet holds the string denoting the allow_auto_subnet field in the database.
	FieldAllowAutoSubnet = "allow_auto_subnet"
	// FieldAllowAutoAllocate holds the string denoting the allow_auto_allocate field in the database.
	FieldAllowAutoAllocate = "allow_auto_allocate"
	// EdgeIPBlockType holds the string denoting the ip_block_type edge name in mutations.
	EdgeIPBlockType = "ip_block_type"
	// EdgeIPAddress holds the string denoting the ip_address edge name in mutations.
	EdgeIPAddress = "ip_address"
	// Table holds the table name of the ipblock in the database.
	Table = "ip_blocks"
	// IPBlockTypeTable is the table that holds the ip_block_type relation/edge.
	IPBlockTypeTable = "ip_blocks"
	// IPBlockTypeInverseTable is the table name for the IPBlockType entity.
	// It exists in this package in order to avoid circular dependency with the "ipblocktype" package.
	IPBlockTypeInverseTable = "ip_block_types"
	// IPBlockTypeColumn is the table column denoting the ip_block_type relation/edge.
	IPBlockTypeColumn = "block_type_id"
	// IPAddressTable is the table that holds the ip_address relation/edge.
	IPAddressTable = "ip_addresses"
	// IPAddressInverseTable is the table name for the IPAddress entity.
	// It exists in this package in order to avoid circular dependency with the "ipaddress" package.
	IPAddressInverseTable = "ip_addresses"
	// IPAddressColumn is the table column denoting the ip_address relation/edge.
	IPAddressColumn = "block_id"
)

// Columns holds all SQL columns for ipblock fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPrefix,
	FieldBlockTypeID,
	FieldLocationID,
	FieldParentBlockID,
	FieldAllowAutoSubnet,
	FieldAllowAutoAllocate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// PrefixValidator is a validator for the "prefix" field. It is called by the builders before save.
	PrefixValidator func(string) error
	// DefaultAllowAutoSubnet holds the default value on creation for the "allow_auto_subnet" field.
	DefaultAllowAutoSubnet bool
	// DefaultAllowAutoAllocate holds the default value on creation for the "allow_auto_allocate" field.
	DefaultAllowAutoAllocate bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() gidx.PrefixedID
)

// OrderOption defines the ordering options for the IPBlock queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPrefix orders the results by the prefix field.
func ByPrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrefix, opts...).ToFunc()
}

// ByBlockTypeID orders the results by the block_type_id field.
func ByBlockTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockTypeID, opts...).ToFunc()
}

// ByLocationID orders the results by the location_id field.
func ByLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocationID, opts...).ToFunc()
}

// ByParentBlockID orders the results by the parent_block_id field.
func ByParentBlockID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentBlockID, opts...).ToFunc()
}

// ByAllowAutoSubnet orders the results by the allow_auto_subnet field.
func ByAllowAutoSubnet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowAutoSubnet, opts...).ToFunc()
}

// ByAllowAutoAllocate orders the results by the allow_auto_allocate field.
func ByAllowAutoAllocate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowAutoAllocate, opts...).ToFunc()
}

// ByIPBlockTypeField orders the results by ip_block_type field.
func ByIPBlockTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIPBlockTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByIPAddressCount orders the results by ip_address count.
func ByIPAddressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIPAddressStep(), opts...)
	}
}

// ByIPAddress orders the results by ip_address terms.
func ByIPAddress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIPAddressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIPBlockTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IPBlockTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, IPBlockTypeTable, IPBlockTypeColumn),
	)
}
func newIPAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IPAddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, IPAddressTable, IPAddressColumn),
	)
}
