// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipaddress"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipblock"
	"go.infratographer.com/x/gidx"
)

// IPAddressCreate is the builder for creating a IPAddress entity.
type IPAddressCreate struct {
	config
	mutation *IPAddressMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (iac *IPAddressCreate) SetCreatedAt(t time.Time) *IPAddressCreate {
	iac.mutation.SetCreatedAt(t)
	return iac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iac *IPAddressCreate) SetNillableCreatedAt(t *time.Time) *IPAddressCreate {
	if t != nil {
		iac.SetCreatedAt(*t)
	}
	return iac
}

// SetUpdatedAt sets the "updated_at" field.
func (iac *IPAddressCreate) SetUpdatedAt(t time.Time) *IPAddressCreate {
	iac.mutation.SetUpdatedAt(t)
	return iac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iac *IPAddressCreate) SetNillableUpdatedAt(t *time.Time) *IPAddressCreate {
	if t != nil {
		iac.SetUpdatedAt(*t)
	}
	return iac
}

// SetIP sets the "IP" field.
func (iac *IPAddressCreate) SetIP(s string) *IPAddressCreate {
	iac.mutation.SetIP(s)
	return iac
}

// SetBlockID sets the "block_id" field.
func (iac *IPAddressCreate) SetBlockID(gi gidx.PrefixedID) *IPAddressCreate {
	iac.mutation.SetBlockID(gi)
	return iac
}

// SetNodeID sets the "node_id" field.
func (iac *IPAddressCreate) SetNodeID(gi gidx.PrefixedID) *IPAddressCreate {
	iac.mutation.SetNodeID(gi)
	return iac
}

// SetNodeOwnerID sets the "node_owner_id" field.
func (iac *IPAddressCreate) SetNodeOwnerID(gi gidx.PrefixedID) *IPAddressCreate {
	iac.mutation.SetNodeOwnerID(gi)
	return iac
}

// SetReserved sets the "reserved" field.
func (iac *IPAddressCreate) SetReserved(b bool) *IPAddressCreate {
	iac.mutation.SetReserved(b)
	return iac
}

// SetNillableReserved sets the "reserved" field if the given value is not nil.
func (iac *IPAddressCreate) SetNillableReserved(b *bool) *IPAddressCreate {
	if b != nil {
		iac.SetReserved(*b)
	}
	return iac
}

// SetID sets the "id" field.
func (iac *IPAddressCreate) SetID(gi gidx.PrefixedID) *IPAddressCreate {
	iac.mutation.SetID(gi)
	return iac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iac *IPAddressCreate) SetNillableID(gi *gidx.PrefixedID) *IPAddressCreate {
	if gi != nil {
		iac.SetID(*gi)
	}
	return iac
}

// SetIPBlockID sets the "ip_block" edge to the IPBlock entity by ID.
func (iac *IPAddressCreate) SetIPBlockID(id gidx.PrefixedID) *IPAddressCreate {
	iac.mutation.SetIPBlockID(id)
	return iac
}

// SetIPBlock sets the "ip_block" edge to the IPBlock entity.
func (iac *IPAddressCreate) SetIPBlock(i *IPBlock) *IPAddressCreate {
	return iac.SetIPBlockID(i.ID)
}

// Mutation returns the IPAddressMutation object of the builder.
func (iac *IPAddressCreate) Mutation() *IPAddressMutation {
	return iac.mutation
}

// Save creates the IPAddress in the database.
func (iac *IPAddressCreate) Save(ctx context.Context) (*IPAddress, error) {
	iac.defaults()
	return withHooks(ctx, iac.sqlSave, iac.mutation, iac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iac *IPAddressCreate) SaveX(ctx context.Context) *IPAddress {
	v, err := iac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iac *IPAddressCreate) Exec(ctx context.Context) error {
	_, err := iac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iac *IPAddressCreate) ExecX(ctx context.Context) {
	if err := iac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iac *IPAddressCreate) defaults() {
	if _, ok := iac.mutation.CreatedAt(); !ok {
		v := ipaddress.DefaultCreatedAt()
		iac.mutation.SetCreatedAt(v)
	}
	if _, ok := iac.mutation.UpdatedAt(); !ok {
		v := ipaddress.DefaultUpdatedAt()
		iac.mutation.SetUpdatedAt(v)
	}
	if _, ok := iac.mutation.Reserved(); !ok {
		v := ipaddress.DefaultReserved
		iac.mutation.SetReserved(v)
	}
	if _, ok := iac.mutation.ID(); !ok {
		v := ipaddress.DefaultID()
		iac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iac *IPAddressCreate) check() error {
	if _, ok := iac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "IPAddress.created_at"`)}
	}
	if _, ok := iac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "IPAddress.updated_at"`)}
	}
	if _, ok := iac.mutation.IP(); !ok {
		return &ValidationError{Name: "IP", err: errors.New(`generated: missing required field "IPAddress.IP"`)}
	}
	if v, ok := iac.mutation.IP(); ok {
		if err := ipaddress.IPValidator(v); err != nil {
			return &ValidationError{Name: "IP", err: fmt.Errorf(`generated: validator failed for field "IPAddress.IP": %w`, err)}
		}
	}
	if _, ok := iac.mutation.BlockID(); !ok {
		return &ValidationError{Name: "block_id", err: errors.New(`generated: missing required field "IPAddress.block_id"`)}
	}
	if _, ok := iac.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`generated: missing required field "IPAddress.node_id"`)}
	}
	if _, ok := iac.mutation.NodeOwnerID(); !ok {
		return &ValidationError{Name: "node_owner_id", err: errors.New(`generated: missing required field "IPAddress.node_owner_id"`)}
	}
	if _, ok := iac.mutation.Reserved(); !ok {
		return &ValidationError{Name: "reserved", err: errors.New(`generated: missing required field "IPAddress.reserved"`)}
	}
	if _, ok := iac.mutation.IPBlockID(); !ok {
		return &ValidationError{Name: "ip_block", err: errors.New(`generated: missing required edge "IPAddress.ip_block"`)}
	}
	return nil
}

func (iac *IPAddressCreate) sqlSave(ctx context.Context) (*IPAddress, error) {
	if err := iac.check(); err != nil {
		return nil, err
	}
	_node, _spec := iac.createSpec()
	if err := sqlgraph.CreateNode(ctx, iac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iac.mutation.id = &_node.ID
	iac.mutation.done = true
	return _node, nil
}

func (iac *IPAddressCreate) createSpec() (*IPAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &IPAddress{config: iac.config}
		_spec = sqlgraph.NewCreateSpec(ipaddress.Table, sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeString))
	)
	if id, ok := iac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iac.mutation.CreatedAt(); ok {
		_spec.SetField(ipaddress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iac.mutation.UpdatedAt(); ok {
		_spec.SetField(ipaddress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := iac.mutation.IP(); ok {
		_spec.SetField(ipaddress.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := iac.mutation.NodeID(); ok {
		_spec.SetField(ipaddress.FieldNodeID, field.TypeString, value)
		_node.NodeID = value
	}
	if value, ok := iac.mutation.NodeOwnerID(); ok {
		_spec.SetField(ipaddress.FieldNodeOwnerID, field.TypeString, value)
		_node.NodeOwnerID = value
	}
	if value, ok := iac.mutation.Reserved(); ok {
		_spec.SetField(ipaddress.FieldReserved, field.TypeBool, value)
		_node.Reserved = value
	}
	if nodes := iac.mutation.IPBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ipaddress.IPBlockTable,
			Columns: []string{ipaddress.IPBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BlockID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IPAddressCreateBulk is the builder for creating many IPAddress entities in bulk.
type IPAddressCreateBulk struct {
	config
	builders []*IPAddressCreate
}

// Save creates the IPAddress entities in the database.
func (iacb *IPAddressCreateBulk) Save(ctx context.Context) ([]*IPAddress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iacb.builders))
	nodes := make([]*IPAddress, len(iacb.builders))
	mutators := make([]Mutator, len(iacb.builders))
	for i := range iacb.builders {
		func(i int, root context.Context) {
			builder := iacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iacb *IPAddressCreateBulk) SaveX(ctx context.Context) []*IPAddress {
	v, err := iacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iacb *IPAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := iacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacb *IPAddressCreateBulk) ExecX(ctx context.Context) {
	if err := iacb.Exec(ctx); err != nil {
		panic(err)
	}
}
