// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipaddress"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipblock"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipblocktype"
	"go.infratographer.com/ipam-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeIPAddress   = "IPAddress"
	TypeIPBlock     = "IPBlock"
	TypeIPBlockType = "IPBlockType"
)

// IPAddressMutation represents an operation that mutates the IPAddress nodes in the graph.
type IPAddressMutation struct {
	config
	op              Op
	typ             string
	id              *gidx.PrefixedID
	created_at      *time.Time
	updated_at      *time.Time
	_IP             *string
	node_id         *gidx.PrefixedID
	node_owner_id   *gidx.PrefixedID
	reserved        *bool
	clearedFields   map[string]struct{}
	ip_block        *gidx.PrefixedID
	clearedip_block bool
	done            bool
	oldValue        func(context.Context) (*IPAddress, error)
	predicates      []predicate.IPAddress
}

var _ ent.Mutation = (*IPAddressMutation)(nil)

// ipaddressOption allows management of the mutation configuration using functional options.
type ipaddressOption func(*IPAddressMutation)

// newIPAddressMutation creates new mutation for the IPAddress entity.
func newIPAddressMutation(c config, op Op, opts ...ipaddressOption) *IPAddressMutation {
	m := &IPAddressMutation{
		config:        c,
		op:            op,
		typ:           TypeIPAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIPAddressID sets the ID field of the mutation.
func withIPAddressID(id gidx.PrefixedID) ipaddressOption {
	return func(m *IPAddressMutation) {
		var (
			err   error
			once  sync.Once
			value *IPAddress
		)
		m.oldValue = func(ctx context.Context) (*IPAddress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IPAddress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIPAddress sets the old IPAddress of the mutation.
func withIPAddress(node *IPAddress) ipaddressOption {
	return func(m *IPAddressMutation) {
		m.oldValue = func(context.Context) (*IPAddress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IPAddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IPAddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of IPAddress entities.
func (m *IPAddressMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IPAddressMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IPAddressMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IPAddress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *IPAddressMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IPAddressMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the IPAddress entity.
// If the IPAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IPAddressMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *IPAddressMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *IPAddressMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the IPAddress entity.
// If the IPAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *IPAddressMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIP sets the "IP" field.
func (m *IPAddressMutation) SetIP(s string) {
	m._IP = &s
}

// IP returns the value of the "IP" field in the mutation.
func (m *IPAddressMutation) IP() (r string, exists bool) {
	v := m._IP
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "IP" field's value of the IPAddress entity.
// If the IPAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "IP" field.
func (m *IPAddressMutation) ResetIP() {
	m._IP = nil
}

// SetBlockID sets the "block_id" field.
func (m *IPAddressMutation) SetBlockID(gi gidx.PrefixedID) {
	m.ip_block = &gi
}

// BlockID returns the value of the "block_id" field in the mutation.
func (m *IPAddressMutation) BlockID() (r gidx.PrefixedID, exists bool) {
	v := m.ip_block
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockID returns the old "block_id" field's value of the IPAddress entity.
// If the IPAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressMutation) OldBlockID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockID: %w", err)
	}
	return oldValue.BlockID, nil
}

// ResetBlockID resets all changes to the "block_id" field.
func (m *IPAddressMutation) ResetBlockID() {
	m.ip_block = nil
}

// SetNodeID sets the "node_id" field.
func (m *IPAddressMutation) SetNodeID(gi gidx.PrefixedID) {
	m.node_id = &gi
}

// NodeID returns the value of the "node_id" field in the mutation.
func (m *IPAddressMutation) NodeID() (r gidx.PrefixedID, exists bool) {
	v := m.node_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNodeID returns the old "node_id" field's value of the IPAddress entity.
// If the IPAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressMutation) OldNodeID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNodeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNodeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNodeID: %w", err)
	}
	return oldValue.NodeID, nil
}

// ResetNodeID resets all changes to the "node_id" field.
func (m *IPAddressMutation) ResetNodeID() {
	m.node_id = nil
}

// SetNodeOwnerID sets the "node_owner_id" field.
func (m *IPAddressMutation) SetNodeOwnerID(gi gidx.PrefixedID) {
	m.node_owner_id = &gi
}

// NodeOwnerID returns the value of the "node_owner_id" field in the mutation.
func (m *IPAddressMutation) NodeOwnerID() (r gidx.PrefixedID, exists bool) {
	v := m.node_owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNodeOwnerID returns the old "node_owner_id" field's value of the IPAddress entity.
// If the IPAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressMutation) OldNodeOwnerID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNodeOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNodeOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNodeOwnerID: %w", err)
	}
	return oldValue.NodeOwnerID, nil
}

// ResetNodeOwnerID resets all changes to the "node_owner_id" field.
func (m *IPAddressMutation) ResetNodeOwnerID() {
	m.node_owner_id = nil
}

// SetReserved sets the "reserved" field.
func (m *IPAddressMutation) SetReserved(b bool) {
	m.reserved = &b
}

// Reserved returns the value of the "reserved" field in the mutation.
func (m *IPAddressMutation) Reserved() (r bool, exists bool) {
	v := m.reserved
	if v == nil {
		return
	}
	return *v, true
}

// OldReserved returns the old "reserved" field's value of the IPAddress entity.
// If the IPAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressMutation) OldReserved(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReserved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReserved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReserved: %w", err)
	}
	return oldValue.Reserved, nil
}

// ResetReserved resets all changes to the "reserved" field.
func (m *IPAddressMutation) ResetReserved() {
	m.reserved = nil
}

// SetIPBlockID sets the "ip_block" edge to the IPBlock entity by id.
func (m *IPAddressMutation) SetIPBlockID(id gidx.PrefixedID) {
	m.ip_block = &id
}

// ClearIPBlock clears the "ip_block" edge to the IPBlock entity.
func (m *IPAddressMutation) ClearIPBlock() {
	m.clearedip_block = true
}

// IPBlockCleared reports if the "ip_block" edge to the IPBlock entity was cleared.
func (m *IPAddressMutation) IPBlockCleared() bool {
	return m.clearedip_block
}

// IPBlockID returns the "ip_block" edge ID in the mutation.
func (m *IPAddressMutation) IPBlockID() (id gidx.PrefixedID, exists bool) {
	if m.ip_block != nil {
		return *m.ip_block, true
	}
	return
}

// IPBlockIDs returns the "ip_block" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IPBlockID instead. It exists only for internal usage by the builders.
func (m *IPAddressMutation) IPBlockIDs() (ids []gidx.PrefixedID) {
	if id := m.ip_block; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIPBlock resets all changes to the "ip_block" edge.
func (m *IPAddressMutation) ResetIPBlock() {
	m.ip_block = nil
	m.clearedip_block = false
}

// Where appends a list predicates to the IPAddressMutation builder.
func (m *IPAddressMutation) Where(ps ...predicate.IPAddress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IPAddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IPAddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IPAddress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IPAddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IPAddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IPAddress).
func (m *IPAddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IPAddressMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, ipaddress.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ipaddress.FieldUpdatedAt)
	}
	if m._IP != nil {
		fields = append(fields, ipaddress.FieldIP)
	}
	if m.ip_block != nil {
		fields = append(fields, ipaddress.FieldBlockID)
	}
	if m.node_id != nil {
		fields = append(fields, ipaddress.FieldNodeID)
	}
	if m.node_owner_id != nil {
		fields = append(fields, ipaddress.FieldNodeOwnerID)
	}
	if m.reserved != nil {
		fields = append(fields, ipaddress.FieldReserved)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IPAddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ipaddress.FieldCreatedAt:
		return m.CreatedAt()
	case ipaddress.FieldUpdatedAt:
		return m.UpdatedAt()
	case ipaddress.FieldIP:
		return m.IP()
	case ipaddress.FieldBlockID:
		return m.BlockID()
	case ipaddress.FieldNodeID:
		return m.NodeID()
	case ipaddress.FieldNodeOwnerID:
		return m.NodeOwnerID()
	case ipaddress.FieldReserved:
		return m.Reserved()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IPAddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ipaddress.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ipaddress.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case ipaddress.FieldIP:
		return m.OldIP(ctx)
	case ipaddress.FieldBlockID:
		return m.OldBlockID(ctx)
	case ipaddress.FieldNodeID:
		return m.OldNodeID(ctx)
	case ipaddress.FieldNodeOwnerID:
		return m.OldNodeOwnerID(ctx)
	case ipaddress.FieldReserved:
		return m.OldReserved(ctx)
	}
	return nil, fmt.Errorf("unknown IPAddress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPAddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ipaddress.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ipaddress.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case ipaddress.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case ipaddress.FieldBlockID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockID(v)
		return nil
	case ipaddress.FieldNodeID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNodeID(v)
		return nil
	case ipaddress.FieldNodeOwnerID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNodeOwnerID(v)
		return nil
	case ipaddress.FieldReserved:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReserved(v)
		return nil
	}
	return fmt.Errorf("unknown IPAddress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IPAddressMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IPAddressMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPAddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IPAddress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IPAddressMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IPAddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IPAddressMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IPAddress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IPAddressMutation) ResetField(name string) error {
	switch name {
	case ipaddress.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ipaddress.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case ipaddress.FieldIP:
		m.ResetIP()
		return nil
	case ipaddress.FieldBlockID:
		m.ResetBlockID()
		return nil
	case ipaddress.FieldNodeID:
		m.ResetNodeID()
		return nil
	case ipaddress.FieldNodeOwnerID:
		m.ResetNodeOwnerID()
		return nil
	case ipaddress.FieldReserved:
		m.ResetReserved()
		return nil
	}
	return fmt.Errorf("unknown IPAddress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IPAddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ip_block != nil {
		edges = append(edges, ipaddress.EdgeIPBlock)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IPAddressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ipaddress.EdgeIPBlock:
		if id := m.ip_block; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IPAddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IPAddressMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IPAddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedip_block {
		edges = append(edges, ipaddress.EdgeIPBlock)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IPAddressMutation) EdgeCleared(name string) bool {
	switch name {
	case ipaddress.EdgeIPBlock:
		return m.clearedip_block
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IPAddressMutation) ClearEdge(name string) error {
	switch name {
	case ipaddress.EdgeIPBlock:
		m.ClearIPBlock()
		return nil
	}
	return fmt.Errorf("unknown IPAddress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IPAddressMutation) ResetEdge(name string) error {
	switch name {
	case ipaddress.EdgeIPBlock:
		m.ResetIPBlock()
		return nil
	}
	return fmt.Errorf("unknown IPAddress edge %s", name)
}

// IPBlockMutation represents an operation that mutates the IPBlock nodes in the graph.
type IPBlockMutation struct {
	config
	op                   Op
	typ                  string
	id                   *gidx.PrefixedID
	created_at           *time.Time
	updated_at           *time.Time
	prefix               *string
	location_id          *gidx.PrefixedID
	parent_block_id      *gidx.PrefixedID
	allow_auto_subnet    *bool
	allow_auto_allocate  *bool
	clearedFields        map[string]struct{}
	ip_block_type        *gidx.PrefixedID
	clearedip_block_type bool
	ip_address           map[gidx.PrefixedID]struct{}
	removedip_address    map[gidx.PrefixedID]struct{}
	clearedip_address    bool
	done                 bool
	oldValue             func(context.Context) (*IPBlock, error)
	predicates           []predicate.IPBlock
}

var _ ent.Mutation = (*IPBlockMutation)(nil)

// ipblockOption allows management of the mutation configuration using functional options.
type ipblockOption func(*IPBlockMutation)

// newIPBlockMutation creates new mutation for the IPBlock entity.
func newIPBlockMutation(c config, op Op, opts ...ipblockOption) *IPBlockMutation {
	m := &IPBlockMutation{
		config:        c,
		op:            op,
		typ:           TypeIPBlock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIPBlockID sets the ID field of the mutation.
func withIPBlockID(id gidx.PrefixedID) ipblockOption {
	return func(m *IPBlockMutation) {
		var (
			err   error
			once  sync.Once
			value *IPBlock
		)
		m.oldValue = func(ctx context.Context) (*IPBlock, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IPBlock.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIPBlock sets the old IPBlock of the mutation.
func withIPBlock(node *IPBlock) ipblockOption {
	return func(m *IPBlockMutation) {
		m.oldValue = func(context.Context) (*IPBlock, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IPBlockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IPBlockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of IPBlock entities.
func (m *IPBlockMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IPBlockMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IPBlockMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IPBlock.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *IPBlockMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IPBlockMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the IPBlock entity.
// If the IPBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IPBlockMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *IPBlockMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *IPBlockMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the IPBlock entity.
// If the IPBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *IPBlockMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPrefix sets the "prefix" field.
func (m *IPBlockMutation) SetPrefix(s string) {
	m.prefix = &s
}

// Prefix returns the value of the "prefix" field in the mutation.
func (m *IPBlockMutation) Prefix() (r string, exists bool) {
	v := m.prefix
	if v == nil {
		return
	}
	return *v, true
}

// OldPrefix returns the old "prefix" field's value of the IPBlock entity.
// If the IPBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockMutation) OldPrefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrefix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrefix: %w", err)
	}
	return oldValue.Prefix, nil
}

// ResetPrefix resets all changes to the "prefix" field.
func (m *IPBlockMutation) ResetPrefix() {
	m.prefix = nil
}

// SetBlockTypeID sets the "block_type_id" field.
func (m *IPBlockMutation) SetBlockTypeID(gi gidx.PrefixedID) {
	m.ip_block_type = &gi
}

// BlockTypeID returns the value of the "block_type_id" field in the mutation.
func (m *IPBlockMutation) BlockTypeID() (r gidx.PrefixedID, exists bool) {
	v := m.ip_block_type
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockTypeID returns the old "block_type_id" field's value of the IPBlock entity.
// If the IPBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockMutation) OldBlockTypeID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockTypeID: %w", err)
	}
	return oldValue.BlockTypeID, nil
}

// ResetBlockTypeID resets all changes to the "block_type_id" field.
func (m *IPBlockMutation) ResetBlockTypeID() {
	m.ip_block_type = nil
}

// SetLocationID sets the "location_id" field.
func (m *IPBlockMutation) SetLocationID(gi gidx.PrefixedID) {
	m.location_id = &gi
}

// LocationID returns the value of the "location_id" field in the mutation.
func (m *IPBlockMutation) LocationID() (r gidx.PrefixedID, exists bool) {
	v := m.location_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLocationID returns the old "location_id" field's value of the IPBlock entity.
// If the IPBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockMutation) OldLocationID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocationID: %w", err)
	}
	return oldValue.LocationID, nil
}

// ResetLocationID resets all changes to the "location_id" field.
func (m *IPBlockMutation) ResetLocationID() {
	m.location_id = nil
}

// SetParentBlockID sets the "parent_block_id" field.
func (m *IPBlockMutation) SetParentBlockID(gi gidx.PrefixedID) {
	m.parent_block_id = &gi
}

// ParentBlockID returns the value of the "parent_block_id" field in the mutation.
func (m *IPBlockMutation) ParentBlockID() (r gidx.PrefixedID, exists bool) {
	v := m.parent_block_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentBlockID returns the old "parent_block_id" field's value of the IPBlock entity.
// If the IPBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockMutation) OldParentBlockID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentBlockID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentBlockID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentBlockID: %w", err)
	}
	return oldValue.ParentBlockID, nil
}

// ResetParentBlockID resets all changes to the "parent_block_id" field.
func (m *IPBlockMutation) ResetParentBlockID() {
	m.parent_block_id = nil
}

// SetAllowAutoSubnet sets the "allow_auto_subnet" field.
func (m *IPBlockMutation) SetAllowAutoSubnet(b bool) {
	m.allow_auto_subnet = &b
}

// AllowAutoSubnet returns the value of the "allow_auto_subnet" field in the mutation.
func (m *IPBlockMutation) AllowAutoSubnet() (r bool, exists bool) {
	v := m.allow_auto_subnet
	if v == nil {
		return
	}
	return *v, true
}

// OldAllowAutoSubnet returns the old "allow_auto_subnet" field's value of the IPBlock entity.
// If the IPBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockMutation) OldAllowAutoSubnet(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllowAutoSubnet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllowAutoSubnet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllowAutoSubnet: %w", err)
	}
	return oldValue.AllowAutoSubnet, nil
}

// ResetAllowAutoSubnet resets all changes to the "allow_auto_subnet" field.
func (m *IPBlockMutation) ResetAllowAutoSubnet() {
	m.allow_auto_subnet = nil
}

// SetAllowAutoAllocate sets the "allow_auto_allocate" field.
func (m *IPBlockMutation) SetAllowAutoAllocate(b bool) {
	m.allow_auto_allocate = &b
}

// AllowAutoAllocate returns the value of the "allow_auto_allocate" field in the mutation.
func (m *IPBlockMutation) AllowAutoAllocate() (r bool, exists bool) {
	v := m.allow_auto_allocate
	if v == nil {
		return
	}
	return *v, true
}

// OldAllowAutoAllocate returns the old "allow_auto_allocate" field's value of the IPBlock entity.
// If the IPBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockMutation) OldAllowAutoAllocate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllowAutoAllocate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllowAutoAllocate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllowAutoAllocate: %w", err)
	}
	return oldValue.AllowAutoAllocate, nil
}

// ResetAllowAutoAllocate resets all changes to the "allow_auto_allocate" field.
func (m *IPBlockMutation) ResetAllowAutoAllocate() {
	m.allow_auto_allocate = nil
}

// SetIPBlockTypeID sets the "ip_block_type" edge to the IPBlockType entity by id.
func (m *IPBlockMutation) SetIPBlockTypeID(id gidx.PrefixedID) {
	m.ip_block_type = &id
}

// ClearIPBlockType clears the "ip_block_type" edge to the IPBlockType entity.
func (m *IPBlockMutation) ClearIPBlockType() {
	m.clearedip_block_type = true
}

// IPBlockTypeCleared reports if the "ip_block_type" edge to the IPBlockType entity was cleared.
func (m *IPBlockMutation) IPBlockTypeCleared() bool {
	return m.clearedip_block_type
}

// IPBlockTypeID returns the "ip_block_type" edge ID in the mutation.
func (m *IPBlockMutation) IPBlockTypeID() (id gidx.PrefixedID, exists bool) {
	if m.ip_block_type != nil {
		return *m.ip_block_type, true
	}
	return
}

// IPBlockTypeIDs returns the "ip_block_type" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IPBlockTypeID instead. It exists only for internal usage by the builders.
func (m *IPBlockMutation) IPBlockTypeIDs() (ids []gidx.PrefixedID) {
	if id := m.ip_block_type; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIPBlockType resets all changes to the "ip_block_type" edge.
func (m *IPBlockMutation) ResetIPBlockType() {
	m.ip_block_type = nil
	m.clearedip_block_type = false
}

// AddIPAddresIDs adds the "ip_address" edge to the IPAddress entity by ids.
func (m *IPBlockMutation) AddIPAddresIDs(ids ...gidx.PrefixedID) {
	if m.ip_address == nil {
		m.ip_address = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		m.ip_address[ids[i]] = struct{}{}
	}
}

// ClearIPAddress clears the "ip_address" edge to the IPAddress entity.
func (m *IPBlockMutation) ClearIPAddress() {
	m.clearedip_address = true
}

// IPAddressCleared reports if the "ip_address" edge to the IPAddress entity was cleared.
func (m *IPBlockMutation) IPAddressCleared() bool {
	return m.clearedip_address
}

// RemoveIPAddresIDs removes the "ip_address" edge to the IPAddress entity by IDs.
func (m *IPBlockMutation) RemoveIPAddresIDs(ids ...gidx.PrefixedID) {
	if m.removedip_address == nil {
		m.removedip_address = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		delete(m.ip_address, ids[i])
		m.removedip_address[ids[i]] = struct{}{}
	}
}

// RemovedIPAddress returns the removed IDs of the "ip_address" edge to the IPAddress entity.
func (m *IPBlockMutation) RemovedIPAddressIDs() (ids []gidx.PrefixedID) {
	for id := range m.removedip_address {
		ids = append(ids, id)
	}
	return
}

// IPAddressIDs returns the "ip_address" edge IDs in the mutation.
func (m *IPBlockMutation) IPAddressIDs() (ids []gidx.PrefixedID) {
	for id := range m.ip_address {
		ids = append(ids, id)
	}
	return
}

// ResetIPAddress resets all changes to the "ip_address" edge.
func (m *IPBlockMutation) ResetIPAddress() {
	m.ip_address = nil
	m.clearedip_address = false
	m.removedip_address = nil
}

// Where appends a list predicates to the IPBlockMutation builder.
func (m *IPBlockMutation) Where(ps ...predicate.IPBlock) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IPBlockMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IPBlockMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IPBlock, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IPBlockMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IPBlockMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IPBlock).
func (m *IPBlockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IPBlockMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, ipblock.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ipblock.FieldUpdatedAt)
	}
	if m.prefix != nil {
		fields = append(fields, ipblock.FieldPrefix)
	}
	if m.ip_block_type != nil {
		fields = append(fields, ipblock.FieldBlockTypeID)
	}
	if m.location_id != nil {
		fields = append(fields, ipblock.FieldLocationID)
	}
	if m.parent_block_id != nil {
		fields = append(fields, ipblock.FieldParentBlockID)
	}
	if m.allow_auto_subnet != nil {
		fields = append(fields, ipblock.FieldAllowAutoSubnet)
	}
	if m.allow_auto_allocate != nil {
		fields = append(fields, ipblock.FieldAllowAutoAllocate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IPBlockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ipblock.FieldCreatedAt:
		return m.CreatedAt()
	case ipblock.FieldUpdatedAt:
		return m.UpdatedAt()
	case ipblock.FieldPrefix:
		return m.Prefix()
	case ipblock.FieldBlockTypeID:
		return m.BlockTypeID()
	case ipblock.FieldLocationID:
		return m.LocationID()
	case ipblock.FieldParentBlockID:
		return m.ParentBlockID()
	case ipblock.FieldAllowAutoSubnet:
		return m.AllowAutoSubnet()
	case ipblock.FieldAllowAutoAllocate:
		return m.AllowAutoAllocate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IPBlockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ipblock.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ipblock.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case ipblock.FieldPrefix:
		return m.OldPrefix(ctx)
	case ipblock.FieldBlockTypeID:
		return m.OldBlockTypeID(ctx)
	case ipblock.FieldLocationID:
		return m.OldLocationID(ctx)
	case ipblock.FieldParentBlockID:
		return m.OldParentBlockID(ctx)
	case ipblock.FieldAllowAutoSubnet:
		return m.OldAllowAutoSubnet(ctx)
	case ipblock.FieldAllowAutoAllocate:
		return m.OldAllowAutoAllocate(ctx)
	}
	return nil, fmt.Errorf("unknown IPBlock field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPBlockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ipblock.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ipblock.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case ipblock.FieldPrefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrefix(v)
		return nil
	case ipblock.FieldBlockTypeID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockTypeID(v)
		return nil
	case ipblock.FieldLocationID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocationID(v)
		return nil
	case ipblock.FieldParentBlockID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentBlockID(v)
		return nil
	case ipblock.FieldAllowAutoSubnet:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllowAutoSubnet(v)
		return nil
	case ipblock.FieldAllowAutoAllocate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllowAutoAllocate(v)
		return nil
	}
	return fmt.Errorf("unknown IPBlock field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IPBlockMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IPBlockMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPBlockMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IPBlock numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IPBlockMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IPBlockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IPBlockMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IPBlock nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IPBlockMutation) ResetField(name string) error {
	switch name {
	case ipblock.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ipblock.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case ipblock.FieldPrefix:
		m.ResetPrefix()
		return nil
	case ipblock.FieldBlockTypeID:
		m.ResetBlockTypeID()
		return nil
	case ipblock.FieldLocationID:
		m.ResetLocationID()
		return nil
	case ipblock.FieldParentBlockID:
		m.ResetParentBlockID()
		return nil
	case ipblock.FieldAllowAutoSubnet:
		m.ResetAllowAutoSubnet()
		return nil
	case ipblock.FieldAllowAutoAllocate:
		m.ResetAllowAutoAllocate()
		return nil
	}
	return fmt.Errorf("unknown IPBlock field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IPBlockMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.ip_block_type != nil {
		edges = append(edges, ipblock.EdgeIPBlockType)
	}
	if m.ip_address != nil {
		edges = append(edges, ipblock.EdgeIPAddress)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IPBlockMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ipblock.EdgeIPBlockType:
		if id := m.ip_block_type; id != nil {
			return []ent.Value{*id}
		}
	case ipblock.EdgeIPAddress:
		ids := make([]ent.Value, 0, len(m.ip_address))
		for id := range m.ip_address {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IPBlockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedip_address != nil {
		edges = append(edges, ipblock.EdgeIPAddress)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IPBlockMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ipblock.EdgeIPAddress:
		ids := make([]ent.Value, 0, len(m.removedip_address))
		for id := range m.removedip_address {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IPBlockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedip_block_type {
		edges = append(edges, ipblock.EdgeIPBlockType)
	}
	if m.clearedip_address {
		edges = append(edges, ipblock.EdgeIPAddress)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IPBlockMutation) EdgeCleared(name string) bool {
	switch name {
	case ipblock.EdgeIPBlockType:
		return m.clearedip_block_type
	case ipblock.EdgeIPAddress:
		return m.clearedip_address
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IPBlockMutation) ClearEdge(name string) error {
	switch name {
	case ipblock.EdgeIPBlockType:
		m.ClearIPBlockType()
		return nil
	}
	return fmt.Errorf("unknown IPBlock unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IPBlockMutation) ResetEdge(name string) error {
	switch name {
	case ipblock.EdgeIPBlockType:
		m.ResetIPBlockType()
		return nil
	case ipblock.EdgeIPAddress:
		m.ResetIPAddress()
		return nil
	}
	return fmt.Errorf("unknown IPBlock edge %s", name)
}

// IPBlockTypeMutation represents an operation that mutates the IPBlockType nodes in the graph.
type IPBlockTypeMutation struct {
	config
	op              Op
	typ             string
	id              *gidx.PrefixedID
	created_at      *time.Time
	updated_at      *time.Time
	name            *string
	owner_id        *gidx.PrefixedID
	clearedFields   map[string]struct{}
	ip_block        map[gidx.PrefixedID]struct{}
	removedip_block map[gidx.PrefixedID]struct{}
	clearedip_block bool
	done            bool
	oldValue        func(context.Context) (*IPBlockType, error)
	predicates      []predicate.IPBlockType
}

var _ ent.Mutation = (*IPBlockTypeMutation)(nil)

// ipblocktypeOption allows management of the mutation configuration using functional options.
type ipblocktypeOption func(*IPBlockTypeMutation)

// newIPBlockTypeMutation creates new mutation for the IPBlockType entity.
func newIPBlockTypeMutation(c config, op Op, opts ...ipblocktypeOption) *IPBlockTypeMutation {
	m := &IPBlockTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeIPBlockType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIPBlockTypeID sets the ID field of the mutation.
func withIPBlockTypeID(id gidx.PrefixedID) ipblocktypeOption {
	return func(m *IPBlockTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *IPBlockType
		)
		m.oldValue = func(ctx context.Context) (*IPBlockType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IPBlockType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIPBlockType sets the old IPBlockType of the mutation.
func withIPBlockType(node *IPBlockType) ipblocktypeOption {
	return func(m *IPBlockTypeMutation) {
		m.oldValue = func(context.Context) (*IPBlockType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IPBlockTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IPBlockTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of IPBlockType entities.
func (m *IPBlockTypeMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IPBlockTypeMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IPBlockTypeMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IPBlockType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *IPBlockTypeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IPBlockTypeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the IPBlockType entity.
// If the IPBlockType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockTypeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IPBlockTypeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *IPBlockTypeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *IPBlockTypeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the IPBlockType entity.
// If the IPBlockType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockTypeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *IPBlockTypeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *IPBlockTypeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *IPBlockTypeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the IPBlockType entity.
// If the IPBlockType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockTypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *IPBlockTypeMutation) ResetName() {
	m.name = nil
}

// SetOwnerID sets the "owner_id" field.
func (m *IPBlockTypeMutation) SetOwnerID(gi gidx.PrefixedID) {
	m.owner_id = &gi
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *IPBlockTypeMutation) OwnerID() (r gidx.PrefixedID, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the IPBlockType entity.
// If the IPBlockType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPBlockTypeMutation) OldOwnerID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *IPBlockTypeMutation) ResetOwnerID() {
	m.owner_id = nil
}

// AddIPBlockIDs adds the "ip_block" edge to the IPBlock entity by ids.
func (m *IPBlockTypeMutation) AddIPBlockIDs(ids ...gidx.PrefixedID) {
	if m.ip_block == nil {
		m.ip_block = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		m.ip_block[ids[i]] = struct{}{}
	}
}

// ClearIPBlock clears the "ip_block" edge to the IPBlock entity.
func (m *IPBlockTypeMutation) ClearIPBlock() {
	m.clearedip_block = true
}

// IPBlockCleared reports if the "ip_block" edge to the IPBlock entity was cleared.
func (m *IPBlockTypeMutation) IPBlockCleared() bool {
	return m.clearedip_block
}

// RemoveIPBlockIDs removes the "ip_block" edge to the IPBlock entity by IDs.
func (m *IPBlockTypeMutation) RemoveIPBlockIDs(ids ...gidx.PrefixedID) {
	if m.removedip_block == nil {
		m.removedip_block = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		delete(m.ip_block, ids[i])
		m.removedip_block[ids[i]] = struct{}{}
	}
}

// RemovedIPBlock returns the removed IDs of the "ip_block" edge to the IPBlock entity.
func (m *IPBlockTypeMutation) RemovedIPBlockIDs() (ids []gidx.PrefixedID) {
	for id := range m.removedip_block {
		ids = append(ids, id)
	}
	return
}

// IPBlockIDs returns the "ip_block" edge IDs in the mutation.
func (m *IPBlockTypeMutation) IPBlockIDs() (ids []gidx.PrefixedID) {
	for id := range m.ip_block {
		ids = append(ids, id)
	}
	return
}

// ResetIPBlock resets all changes to the "ip_block" edge.
func (m *IPBlockTypeMutation) ResetIPBlock() {
	m.ip_block = nil
	m.clearedip_block = false
	m.removedip_block = nil
}

// Where appends a list predicates to the IPBlockTypeMutation builder.
func (m *IPBlockTypeMutation) Where(ps ...predicate.IPBlockType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IPBlockTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IPBlockTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IPBlockType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IPBlockTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IPBlockTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IPBlockType).
func (m *IPBlockTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IPBlockTypeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, ipblocktype.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ipblocktype.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, ipblocktype.FieldName)
	}
	if m.owner_id != nil {
		fields = append(fields, ipblocktype.FieldOwnerID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IPBlockTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ipblocktype.FieldCreatedAt:
		return m.CreatedAt()
	case ipblocktype.FieldUpdatedAt:
		return m.UpdatedAt()
	case ipblocktype.FieldName:
		return m.Name()
	case ipblocktype.FieldOwnerID:
		return m.OwnerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IPBlockTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ipblocktype.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ipblocktype.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case ipblocktype.FieldName:
		return m.OldName(ctx)
	case ipblocktype.FieldOwnerID:
		return m.OldOwnerID(ctx)
	}
	return nil, fmt.Errorf("unknown IPBlockType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPBlockTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ipblocktype.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ipblocktype.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case ipblocktype.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case ipblocktype.FieldOwnerID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	}
	return fmt.Errorf("unknown IPBlockType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IPBlockTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IPBlockTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPBlockTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IPBlockType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IPBlockTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IPBlockTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IPBlockTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IPBlockType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IPBlockTypeMutation) ResetField(name string) error {
	switch name {
	case ipblocktype.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ipblocktype.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case ipblocktype.FieldName:
		m.ResetName()
		return nil
	case ipblocktype.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	}
	return fmt.Errorf("unknown IPBlockType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IPBlockTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ip_block != nil {
		edges = append(edges, ipblocktype.EdgeIPBlock)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IPBlockTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ipblocktype.EdgeIPBlock:
		ids := make([]ent.Value, 0, len(m.ip_block))
		for id := range m.ip_block {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IPBlockTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedip_block != nil {
		edges = append(edges, ipblocktype.EdgeIPBlock)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IPBlockTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ipblocktype.EdgeIPBlock:
		ids := make([]ent.Value, 0, len(m.removedip_block))
		for id := range m.removedip_block {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IPBlockTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedip_block {
		edges = append(edges, ipblocktype.EdgeIPBlock)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IPBlockTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case ipblocktype.EdgeIPBlock:
		return m.clearedip_block
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IPBlockTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown IPBlockType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IPBlockTypeMutation) ResetEdge(name string) error {
	switch name {
	case ipblocktype.EdgeIPBlock:
		m.ResetIPBlock()
		return nil
	}
	return fmt.Errorf("unknown IPBlockType edge %s", name)
}
