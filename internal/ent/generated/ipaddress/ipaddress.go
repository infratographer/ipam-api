// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package ipaddress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/x/gidx"
)

const (
	// Label holds the string label denoting the ipaddress type in the database.
	Label = "ip_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldBlockID holds the string denoting the block_id field in the database.
	FieldBlockID = "block_id"
	// FieldNodeID holds the string denoting the node_id field in the database.
	FieldNodeID = "node_id"
	// FieldNodeOwnerID holds the string denoting the node_owner_id field in the database.
	FieldNodeOwnerID = "node_owner_id"
	// FieldReserved holds the string denoting the reserved field in the database.
	FieldReserved = "reserved"
	// EdgeIPBlock holds the string denoting the ip_block edge name in mutations.
	EdgeIPBlock = "ip_block"
	// Table holds the table name of the ipaddress in the database.
	Table = "ip_addresses"
	// IPBlockTable is the table that holds the ip_block relation/edge.
	IPBlockTable = "ip_addresses"
	// IPBlockInverseTable is the table name for the IPBlock entity.
	// It exists in this package in order to avoid circular dependency with the "ipblock" package.
	IPBlockInverseTable = "ip_blocks"
	// IPBlockColumn is the table column denoting the ip_block relation/edge.
	IPBlockColumn = "block_id"
)

// Columns holds all SQL columns for ipaddress fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldIP,
	FieldBlockID,
	FieldNodeID,
	FieldNodeOwnerID,
	FieldReserved,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IPValidator is a validator for the "IP" field. It is called by the builders before save.
	IPValidator func(string) error
	// DefaultReserved holds the default value on creation for the "reserved" field.
	DefaultReserved bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() gidx.PrefixedID
)

// OrderOption defines the ordering options for the IPAddress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByIP orders the results by the IP field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByBlockID orders the results by the block_id field.
func ByBlockID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockID, opts...).ToFunc()
}

// ByNodeID orders the results by the node_id field.
func ByNodeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeID, opts...).ToFunc()
}

// ByNodeOwnerID orders the results by the node_owner_id field.
func ByNodeOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeOwnerID, opts...).ToFunc()
}

// ByReserved orders the results by the reserved field.
func ByReserved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReserved, opts...).ToFunc()
}

// ByIPBlockField orders the results by ip_block field.
func ByIPBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIPBlockStep(), sql.OrderByField(field, opts...))
	}
}
func newIPBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IPBlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, IPBlockTable, IPBlockColumn),
	)
}
