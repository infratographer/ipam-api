// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package ipaddress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/ipam-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// ID filters vertices based on their ID field.
func ID(id gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldUpdatedAt, v))
}

// IP applies equality check predicate on the "IP" field. It's identical to IPEQ.
func IP(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldIP, v))
}

// BlockID applies equality check predicate on the "block_id" field. It's identical to BlockIDEQ.
func BlockID(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldBlockID, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldNodeID, v))
}

// NodeOwnerID applies equality check predicate on the "node_owner_id" field. It's identical to NodeOwnerIDEQ.
func NodeOwnerID(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldNodeOwnerID, v))
}

// Reserved applies equality check predicate on the "reserved" field. It's identical to ReservedEQ.
func Reserved(v bool) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldReserved, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLTE(FieldUpdatedAt, v))
}

// IPEQ applies the EQ predicate on the "IP" field.
func IPEQ(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "IP" field.
func IPNEQ(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "IP" field.
func IPIn(vs ...string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "IP" field.
func IPNotIn(vs ...string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "IP" field.
func IPGT(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "IP" field.
func IPGTE(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "IP" field.
func IPLT(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "IP" field.
func IPLTE(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "IP" field.
func IPContains(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "IP" field.
func IPHasPrefix(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "IP" field.
func IPHasSuffix(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "IP" field.
func IPEqualFold(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "IP" field.
func IPContainsFold(v string) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldContainsFold(FieldIP, v))
}

// BlockIDEQ applies the EQ predicate on the "block_id" field.
func BlockIDEQ(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldBlockID, v))
}

// BlockIDNEQ applies the NEQ predicate on the "block_id" field.
func BlockIDNEQ(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNEQ(FieldBlockID, v))
}

// BlockIDIn applies the In predicate on the "block_id" field.
func BlockIDIn(vs ...gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldIn(FieldBlockID, vs...))
}

// BlockIDNotIn applies the NotIn predicate on the "block_id" field.
func BlockIDNotIn(vs ...gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNotIn(FieldBlockID, vs...))
}

// BlockIDGT applies the GT predicate on the "block_id" field.
func BlockIDGT(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGT(FieldBlockID, v))
}

// BlockIDGTE applies the GTE predicate on the "block_id" field.
func BlockIDGTE(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGTE(FieldBlockID, v))
}

// BlockIDLT applies the LT predicate on the "block_id" field.
func BlockIDLT(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLT(FieldBlockID, v))
}

// BlockIDLTE applies the LTE predicate on the "block_id" field.
func BlockIDLTE(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLTE(FieldBlockID, v))
}

// BlockIDContains applies the Contains predicate on the "block_id" field.
func BlockIDContains(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldContains(FieldBlockID, vc))
}

// BlockIDHasPrefix applies the HasPrefix predicate on the "block_id" field.
func BlockIDHasPrefix(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldHasPrefix(FieldBlockID, vc))
}

// BlockIDHasSuffix applies the HasSuffix predicate on the "block_id" field.
func BlockIDHasSuffix(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldHasSuffix(FieldBlockID, vc))
}

// BlockIDEqualFold applies the EqualFold predicate on the "block_id" field.
func BlockIDEqualFold(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldEqualFold(FieldBlockID, vc))
}

// BlockIDContainsFold applies the ContainsFold predicate on the "block_id" field.
func BlockIDContainsFold(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldContainsFold(FieldBlockID, vc))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldContains(FieldNodeID, vc))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldHasPrefix(FieldNodeID, vc))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldHasSuffix(FieldNodeID, vc))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldEqualFold(FieldNodeID, vc))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldContainsFold(FieldNodeID, vc))
}

// NodeOwnerIDEQ applies the EQ predicate on the "node_owner_id" field.
func NodeOwnerIDEQ(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldNodeOwnerID, v))
}

// NodeOwnerIDNEQ applies the NEQ predicate on the "node_owner_id" field.
func NodeOwnerIDNEQ(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNEQ(FieldNodeOwnerID, v))
}

// NodeOwnerIDIn applies the In predicate on the "node_owner_id" field.
func NodeOwnerIDIn(vs ...gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldIn(FieldNodeOwnerID, vs...))
}

// NodeOwnerIDNotIn applies the NotIn predicate on the "node_owner_id" field.
func NodeOwnerIDNotIn(vs ...gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNotIn(FieldNodeOwnerID, vs...))
}

// NodeOwnerIDGT applies the GT predicate on the "node_owner_id" field.
func NodeOwnerIDGT(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGT(FieldNodeOwnerID, v))
}

// NodeOwnerIDGTE applies the GTE predicate on the "node_owner_id" field.
func NodeOwnerIDGTE(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldGTE(FieldNodeOwnerID, v))
}

// NodeOwnerIDLT applies the LT predicate on the "node_owner_id" field.
func NodeOwnerIDLT(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLT(FieldNodeOwnerID, v))
}

// NodeOwnerIDLTE applies the LTE predicate on the "node_owner_id" field.
func NodeOwnerIDLTE(v gidx.PrefixedID) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldLTE(FieldNodeOwnerID, v))
}

// NodeOwnerIDContains applies the Contains predicate on the "node_owner_id" field.
func NodeOwnerIDContains(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldContains(FieldNodeOwnerID, vc))
}

// NodeOwnerIDHasPrefix applies the HasPrefix predicate on the "node_owner_id" field.
func NodeOwnerIDHasPrefix(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldHasPrefix(FieldNodeOwnerID, vc))
}

// NodeOwnerIDHasSuffix applies the HasSuffix predicate on the "node_owner_id" field.
func NodeOwnerIDHasSuffix(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldHasSuffix(FieldNodeOwnerID, vc))
}

// NodeOwnerIDEqualFold applies the EqualFold predicate on the "node_owner_id" field.
func NodeOwnerIDEqualFold(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldEqualFold(FieldNodeOwnerID, vc))
}

// NodeOwnerIDContainsFold applies the ContainsFold predicate on the "node_owner_id" field.
func NodeOwnerIDContainsFold(v gidx.PrefixedID) predicate.IPAddress {
	vc := string(v)
	return predicate.IPAddress(sql.FieldContainsFold(FieldNodeOwnerID, vc))
}

// ReservedEQ applies the EQ predicate on the "reserved" field.
func ReservedEQ(v bool) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldEQ(FieldReserved, v))
}

// ReservedNEQ applies the NEQ predicate on the "reserved" field.
func ReservedNEQ(v bool) predicate.IPAddress {
	return predicate.IPAddress(sql.FieldNEQ(FieldReserved, v))
}

// HasIPBlock applies the HasEdge predicate on the "ip_block" edge.
func HasIPBlock() predicate.IPAddress {
	return predicate.IPAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, IPBlockTable, IPBlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIPBlockWith applies the HasEdge predicate on the "ip_block" edge with a given conditions (other predicates).
func HasIPBlockWith(preds ...predicate.IPBlock) predicate.IPAddress {
	return predicate.IPAddress(func(s *sql.Selector) {
		step := newIPBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IPAddress) predicate.IPAddress {
	return predicate.IPAddress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IPAddress) predicate.IPAddress {
	return predicate.IPAddress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IPAddress) predicate.IPAddress {
	return predicate.IPAddress(func(s *sql.Selector) {
		p(s.Not())
	})
}
