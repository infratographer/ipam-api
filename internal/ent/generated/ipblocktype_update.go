// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipblock"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipblocktype"
	"go.infratographer.com/ipam-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// IPBlockTypeUpdate is the builder for updating IPBlockType entities.
type IPBlockTypeUpdate struct {
	config
	hooks    []Hook
	mutation *IPBlockTypeMutation
}

// Where appends a list predicates to the IPBlockTypeUpdate builder.
func (ibtu *IPBlockTypeUpdate) Where(ps ...predicate.IPBlockType) *IPBlockTypeUpdate {
	ibtu.mutation.Where(ps...)
	return ibtu
}

// SetName sets the "name" field.
func (ibtu *IPBlockTypeUpdate) SetName(s string) *IPBlockTypeUpdate {
	ibtu.mutation.SetName(s)
	return ibtu
}

// AddIPBlockIDs adds the "ip_block" edge to the IPBlock entity by IDs.
func (ibtu *IPBlockTypeUpdate) AddIPBlockIDs(ids ...gidx.PrefixedID) *IPBlockTypeUpdate {
	ibtu.mutation.AddIPBlockIDs(ids...)
	return ibtu
}

// AddIPBlock adds the "ip_block" edges to the IPBlock entity.
func (ibtu *IPBlockTypeUpdate) AddIPBlock(i ...*IPBlock) *IPBlockTypeUpdate {
	ids := make([]gidx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ibtu.AddIPBlockIDs(ids...)
}

// Mutation returns the IPBlockTypeMutation object of the builder.
func (ibtu *IPBlockTypeUpdate) Mutation() *IPBlockTypeMutation {
	return ibtu.mutation
}

// ClearIPBlock clears all "ip_block" edges to the IPBlock entity.
func (ibtu *IPBlockTypeUpdate) ClearIPBlock() *IPBlockTypeUpdate {
	ibtu.mutation.ClearIPBlock()
	return ibtu
}

// RemoveIPBlockIDs removes the "ip_block" edge to IPBlock entities by IDs.
func (ibtu *IPBlockTypeUpdate) RemoveIPBlockIDs(ids ...gidx.PrefixedID) *IPBlockTypeUpdate {
	ibtu.mutation.RemoveIPBlockIDs(ids...)
	return ibtu
}

// RemoveIPBlock removes "ip_block" edges to IPBlock entities.
func (ibtu *IPBlockTypeUpdate) RemoveIPBlock(i ...*IPBlock) *IPBlockTypeUpdate {
	ids := make([]gidx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ibtu.RemoveIPBlockIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ibtu *IPBlockTypeUpdate) Save(ctx context.Context) (int, error) {
	ibtu.defaults()
	return withHooks(ctx, ibtu.sqlSave, ibtu.mutation, ibtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ibtu *IPBlockTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ibtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ibtu *IPBlockTypeUpdate) Exec(ctx context.Context) error {
	_, err := ibtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibtu *IPBlockTypeUpdate) ExecX(ctx context.Context) {
	if err := ibtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ibtu *IPBlockTypeUpdate) defaults() {
	if _, ok := ibtu.mutation.UpdatedAt(); !ok {
		v := ipblocktype.UpdateDefaultUpdatedAt()
		ibtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ibtu *IPBlockTypeUpdate) check() error {
	if v, ok := ibtu.mutation.Name(); ok {
		if err := ipblocktype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "IPBlockType.name": %w`, err)}
		}
	}
	return nil
}

func (ibtu *IPBlockTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ibtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ipblocktype.Table, ipblocktype.Columns, sqlgraph.NewFieldSpec(ipblocktype.FieldID, field.TypeString))
	if ps := ibtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ibtu.mutation.UpdatedAt(); ok {
		_spec.SetField(ipblocktype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ibtu.mutation.Name(); ok {
		_spec.SetField(ipblocktype.FieldName, field.TypeString, value)
	}
	if ibtu.mutation.IPBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ipblocktype.IPBlockTable,
			Columns: []string{ipblocktype.IPBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipblock.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ibtu.mutation.RemovedIPBlockIDs(); len(nodes) > 0 && !ibtu.mutation.IPBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ipblocktype.IPBlockTable,
			Columns: []string{ipblocktype.IPBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ibtu.mutation.IPBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ipblocktype.IPBlockTable,
			Columns: []string{ipblocktype.IPBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ibtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipblocktype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ibtu.mutation.done = true
	return n, nil
}

// IPBlockTypeUpdateOne is the builder for updating a single IPBlockType entity.
type IPBlockTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IPBlockTypeMutation
}

// SetName sets the "name" field.
func (ibtuo *IPBlockTypeUpdateOne) SetName(s string) *IPBlockTypeUpdateOne {
	ibtuo.mutation.SetName(s)
	return ibtuo
}

// AddIPBlockIDs adds the "ip_block" edge to the IPBlock entity by IDs.
func (ibtuo *IPBlockTypeUpdateOne) AddIPBlockIDs(ids ...gidx.PrefixedID) *IPBlockTypeUpdateOne {
	ibtuo.mutation.AddIPBlockIDs(ids...)
	return ibtuo
}

// AddIPBlock adds the "ip_block" edges to the IPBlock entity.
func (ibtuo *IPBlockTypeUpdateOne) AddIPBlock(i ...*IPBlock) *IPBlockTypeUpdateOne {
	ids := make([]gidx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ibtuo.AddIPBlockIDs(ids...)
}

// Mutation returns the IPBlockTypeMutation object of the builder.
func (ibtuo *IPBlockTypeUpdateOne) Mutation() *IPBlockTypeMutation {
	return ibtuo.mutation
}

// ClearIPBlock clears all "ip_block" edges to the IPBlock entity.
func (ibtuo *IPBlockTypeUpdateOne) ClearIPBlock() *IPBlockTypeUpdateOne {
	ibtuo.mutation.ClearIPBlock()
	return ibtuo
}

// RemoveIPBlockIDs removes the "ip_block" edge to IPBlock entities by IDs.
func (ibtuo *IPBlockTypeUpdateOne) RemoveIPBlockIDs(ids ...gidx.PrefixedID) *IPBlockTypeUpdateOne {
	ibtuo.mutation.RemoveIPBlockIDs(ids...)
	return ibtuo
}

// RemoveIPBlock removes "ip_block" edges to IPBlock entities.
func (ibtuo *IPBlockTypeUpdateOne) RemoveIPBlock(i ...*IPBlock) *IPBlockTypeUpdateOne {
	ids := make([]gidx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ibtuo.RemoveIPBlockIDs(ids...)
}

// Where appends a list predicates to the IPBlockTypeUpdate builder.
func (ibtuo *IPBlockTypeUpdateOne) Where(ps ...predicate.IPBlockType) *IPBlockTypeUpdateOne {
	ibtuo.mutation.Where(ps...)
	return ibtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ibtuo *IPBlockTypeUpdateOne) Select(field string, fields ...string) *IPBlockTypeUpdateOne {
	ibtuo.fields = append([]string{field}, fields...)
	return ibtuo
}

// Save executes the query and returns the updated IPBlockType entity.
func (ibtuo *IPBlockTypeUpdateOne) Save(ctx context.Context) (*IPBlockType, error) {
	ibtuo.defaults()
	return withHooks(ctx, ibtuo.sqlSave, ibtuo.mutation, ibtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ibtuo *IPBlockTypeUpdateOne) SaveX(ctx context.Context) *IPBlockType {
	node, err := ibtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ibtuo *IPBlockTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ibtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibtuo *IPBlockTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ibtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ibtuo *IPBlockTypeUpdateOne) defaults() {
	if _, ok := ibtuo.mutation.UpdatedAt(); !ok {
		v := ipblocktype.UpdateDefaultUpdatedAt()
		ibtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ibtuo *IPBlockTypeUpdateOne) check() error {
	if v, ok := ibtuo.mutation.Name(); ok {
		if err := ipblocktype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "IPBlockType.name": %w`, err)}
		}
	}
	return nil
}

func (ibtuo *IPBlockTypeUpdateOne) sqlSave(ctx context.Context) (_node *IPBlockType, err error) {
	if err := ibtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ipblocktype.Table, ipblocktype.Columns, sqlgraph.NewFieldSpec(ipblocktype.FieldID, field.TypeString))
	id, ok := ibtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "IPBlockType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ibtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipblocktype.FieldID)
		for _, f := range fields {
			if !ipblocktype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != ipblocktype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ibtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ibtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ipblocktype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ibtuo.mutation.Name(); ok {
		_spec.SetField(ipblocktype.FieldName, field.TypeString, value)
	}
	if ibtuo.mutation.IPBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ipblocktype.IPBlockTable,
			Columns: []string{ipblocktype.IPBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipblock.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ibtuo.mutation.RemovedIPBlockIDs(); len(nodes) > 0 && !ibtuo.mutation.IPBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ipblocktype.IPBlockTable,
			Columns: []string{ipblocktype.IPBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ibtuo.mutation.IPBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ipblocktype.IPBlockTable,
			Columns: []string{ipblocktype.IPBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IPBlockType{config: ibtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ibtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipblocktype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ibtuo.mutation.done = true
	return _node, nil
}
