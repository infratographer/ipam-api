// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/ipam-api/internal/ent/generated/ipblocktype"
	"go.infratographer.com/x/gidx"
)

// Represents an ip block type node on the graph.
type IPBlockType struct {
	config `json:"-"`
	// ID of the ent.
	// The ID of the IP Block Type.
	ID gidx.PrefixedID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The name of the ip block type.
	Name string `json:"name,omitempty"`
	// The ID for the owner for this ip block type.
	OwnerID gidx.PrefixedID `json:"owner_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IPBlockTypeQuery when eager-loading is set.
	Edges        IPBlockTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IPBlockTypeEdges holds the relations/edges for other nodes in the graph.
type IPBlockTypeEdges struct {
	// IPBlock holds the value of the ip_block edge.
	IPBlock []*IPBlock `json:"ip_block,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedIPBlock map[string][]*IPBlock
}

// IPBlockOrErr returns the IPBlock value or an error if the edge
// was not loaded in eager-loading.
func (e IPBlockTypeEdges) IPBlockOrErr() ([]*IPBlock, error) {
	if e.loadedTypes[0] {
		return e.IPBlock, nil
	}
	return nil, &NotLoadedError{edge: "ip_block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IPBlockType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ipblocktype.FieldID, ipblocktype.FieldOwnerID:
			values[i] = new(gidx.PrefixedID)
		case ipblocktype.FieldName:
			values[i] = new(sql.NullString)
		case ipblocktype.FieldCreatedAt, ipblocktype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IPBlockType fields.
func (ibt *IPBlockType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ipblocktype.FieldID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ibt.ID = *value
			}
		case ipblocktype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ibt.CreatedAt = value.Time
			}
		case ipblocktype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ibt.UpdatedAt = value.Time
			}
		case ipblocktype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ibt.Name = value.String
			}
		case ipblocktype.FieldOwnerID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value != nil {
				ibt.OwnerID = *value
			}
		default:
			ibt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IPBlockType.
// This includes values selected through modifiers, order, etc.
func (ibt *IPBlockType) Value(name string) (ent.Value, error) {
	return ibt.selectValues.Get(name)
}

// QueryIPBlock queries the "ip_block" edge of the IPBlockType entity.
func (ibt *IPBlockType) QueryIPBlock() *IPBlockQuery {
	return NewIPBlockTypeClient(ibt.config).QueryIPBlock(ibt)
}

// Update returns a builder for updating this IPBlockType.
// Note that you need to call IPBlockType.Unwrap() before calling this method if this IPBlockType
// was returned from a transaction, and the transaction was committed or rolled back.
func (ibt *IPBlockType) Update() *IPBlockTypeUpdateOne {
	return NewIPBlockTypeClient(ibt.config).UpdateOne(ibt)
}

// Unwrap unwraps the IPBlockType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ibt *IPBlockType) Unwrap() *IPBlockType {
	_tx, ok := ibt.config.driver.(*txDriver)
	if !ok {
		panic("generated: IPBlockType is not a transactional entity")
	}
	ibt.config.driver = _tx.drv
	return ibt
}

// String implements the fmt.Stringer.
func (ibt *IPBlockType) String() string {
	var builder strings.Builder
	builder.WriteString("IPBlockType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ibt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ibt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ibt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ibt.Name)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", ibt.OwnerID))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (ibt IPBlockType) IsEntity() {}

// NamedIPBlock returns the IPBlock named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ibt *IPBlockType) NamedIPBlock(name string) ([]*IPBlock, error) {
	if ibt.Edges.namedIPBlock == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ibt.Edges.namedIPBlock[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ibt *IPBlockType) appendNamedIPBlock(name string, edges ...*IPBlock) {
	if ibt.Edges.namedIPBlock == nil {
		ibt.Edges.namedIPBlock = make(map[string][]*IPBlock)
	}
	if len(edges) == 0 {
		ibt.Edges.namedIPBlock[name] = []*IPBlock{}
	} else {
		ibt.Edges.namedIPBlock[name] = append(ibt.Edges.namedIPBlock[name], edges...)
	}
}

// IPBlockTypes is a parsable slice of IPBlockType.
type IPBlockTypes []*IPBlockType
