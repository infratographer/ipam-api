// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package testclient

import (
	"context"
	"net/http"
	"time"

	"github.com/Yamashou/gqlgenc/client"
	"go.infratographer.com/x/gidx"
)

type TestClient interface {
	GetIPBlockType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetIPBlockType, error)
	IPBlockTypeCreate(ctx context.Context, input CreateIPBlockTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*IPBlockTypeCreate, error)
	IPBlockTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*IPBlockTypeDelete, error)
	IPBlockTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateIPBlockTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*IPBlockTypeUpdate, error)
	ListIPBlockTypes(ctx context.Context, id gidx.PrefixedID, orderBy *IPBlockTypeOrder, httpRequestOptions ...client.HTTPRequestOption) (*ListIPBlockTypes, error)
}

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) TestClient {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	IPAddress   IPAddress   "json:\"ip_address\" graphql:\"ip_address\""
	IPBlock     IPBlock     "json:\"ip_block\" graphql:\"ip_block\""
	IPBlockType IPBlockType "json:\"ip_block_type\" graphql:\"ip_block_type\""
	Entities    []Entity    "json:\"_entities\" graphql:\"_entities\""
	Service     Service     "json:\"_service\" graphql:\"_service\""
}
type Mutation struct {
	CreateIPAddress   IPAddressCreatePayload   "json:\"createIPAddress\" graphql:\"createIPAddress\""
	UpdateIPAddress   IPAddressUpdatePayload   "json:\"updateIPAddress\" graphql:\"updateIPAddress\""
	DeleteIPAddress   IPAddressDeletePayload   "json:\"deleteIPAddress\" graphql:\"deleteIPAddress\""
	CreateIPBlock     IPBlockCreatePayload     "json:\"createIPBlock\" graphql:\"createIPBlock\""
	UpdateIPBlock     IPBlockUpdatePayload     "json:\"updateIPBlock\" graphql:\"updateIPBlock\""
	DeleteIPBlock     IPBlockDeletePayload     "json:\"deleteIPBlock\" graphql:\"deleteIPBlock\""
	CreateIPBlockType IPBlockTypeCreatePayload "json:\"createIPBlockType\" graphql:\"createIPBlockType\""
	UpdateIPBlockType IPBlockTypeUpdatePayload "json:\"updateIPBlockType\" graphql:\"updateIPBlockType\""
	DeleteIPBlockType IPBlockTypeDeletePayload "json:\"deleteIPBlockType\" graphql:\"deleteIPBlockType\""
}
type GetIPBlockType struct {
	IPBlockType struct {
		ID    gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Name  string          "json:\"name\" graphql:\"name\""
		Owner struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"owner\" graphql:\"owner\""
		CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
	} "json:\"ip_block_type\" graphql:\"ip_block_type\""
}
type IPBlockTypeCreate struct {
	CreateIPBlockType struct {
		IPBlockType struct {
			ID    gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name  string          "json:\"name\" graphql:\"name\""
			Owner struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"owner\" graphql:\"owner\""
			CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"ip_block_type\" graphql:\"ip_block_type\""
	} "json:\"createIPBlockType\" graphql:\"createIPBlockType\""
}
type IPBlockTypeDelete struct {
	DeleteIPBlockType struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"deleteIPBlockType\" graphql:\"deleteIPBlockType\""
}
type IPBlockTypeUpdate struct {
	UpdateIPBlockType struct {
		IPBlockType struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name      string          "json:\"name\" graphql:\"name\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"ip_block_type\" graphql:\"ip_block_type\""
	} "json:\"updateIPBlockType\" graphql:\"updateIPBlockType\""
}
type ListIPBlockTypes struct {
	Entities []*struct {
		IPBlockType struct {
			Edges []*struct {
				Node *struct {
					ID   gidx.PrefixedID "json:\"id\" graphql:\"id\""
					Name string          "json:\"name\" graphql:\"name\""
				} "json:\"node\" graphql:\"node\""
			} "json:\"edges\" graphql:\"edges\""
		} "json:\"ip_block_type\" graphql:\"ip_block_type\""
	} "json:\"_entities\" graphql:\"_entities\""
}

const GetIPBlockTypeDocument = `query GetIPBlockType ($id: ID!) {
	ip_block_type(id: $id) {
		id
		name
		owner {
			id
		}
		createdAt
		updatedAt
	}
}
`

func (c *Client) GetIPBlockType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetIPBlockType, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetIPBlockType
	if err := c.Client.Post(ctx, "GetIPBlockType", GetIPBlockTypeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const IPBlockTypeCreateDocument = `mutation IPBlockTypeCreate ($input: CreateIPBlockTypeInput!) {
	createIPBlockType(input: $input) {
		ip_block_type {
			id
			name
			owner {
				id
			}
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) IPBlockTypeCreate(ctx context.Context, input CreateIPBlockTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*IPBlockTypeCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res IPBlockTypeCreate
	if err := c.Client.Post(ctx, "IPBlockTypeCreate", IPBlockTypeCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const IPBlockTypeDeleteDocument = `mutation IPBlockTypeDelete ($id: ID!) {
	deleteIPBlockType(id: $id) {
		deletedID
	}
}
`

func (c *Client) IPBlockTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*IPBlockTypeDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res IPBlockTypeDelete
	if err := c.Client.Post(ctx, "IPBlockTypeDelete", IPBlockTypeDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const IPBlockTypeUpdateDocument = `mutation IPBlockTypeUpdate ($id: ID!, $input: UpdateIPBlockTypeInput!) {
	updateIPBlockType(id: $id, input: $input) {
		ip_block_type {
			id
			name
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) IPBlockTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateIPBlockTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*IPBlockTypeUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res IPBlockTypeUpdate
	if err := c.Client.Post(ctx, "IPBlockTypeUpdate", IPBlockTypeUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ListIPBlockTypesDocument = `query ListIPBlockTypes ($id: ID!, $orderBy: IPBlockTypeOrder) {
	_entities(representations: [{__typename:"Owner",id:$id}]) {
		... on Owner {
			ip_block_type(orderBy: $orderBy) {
				edges {
					node {
						id
						name
					}
				}
			}
		}
	}
}
`

func (c *Client) ListIPBlockTypes(ctx context.Context, id gidx.PrefixedID, orderBy *IPBlockTypeOrder, httpRequestOptions ...client.HTTPRequestOption) (*ListIPBlockTypes, error) {
	vars := map[string]interface{}{
		"id":      id,
		"orderBy": orderBy,
	}

	var res ListIPBlockTypes
	if err := c.Client.Post(ctx, "ListIPBlockTypes", ListIPBlockTypesDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
