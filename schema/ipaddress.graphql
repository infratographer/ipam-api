extend type Query {
  """
  Look up ip block type by ID
  """
  ipAddress(
    """
    ID of the ip block type
    """
    id: ID!
  ): IPAddress!
}

extend type Mutation {
  """
  Create a new ip address
  """
  createIPAddress(input: CreateIPAddressInput!): IPAddressCreatePayload!
  """
  Update an existing ip block type
  """
  updateIPAddress(
    """
    ID of the ip address to update
    """
    id: ID!
    input: UpdateIPAddressInput!
  ): IPAddressUpdatePayload!
  """
  Delete an existing ip block type
  """
  deleteIPAddress(
    """
    ID of the ip address
    """
    id: ID!
  ): IPAddressDeletePayload!
}

"""
Return response for createIPAddress mutation
"""
type IPAddressCreatePayload {
  """
  Created ip block type
  """
  ipAddress: IPAddress!
}

"""
Return response for updateIPAddress mutation
"""
type IPAddressUpdatePayload {
  """
  Updated ip block type
  """
  ipAddress: IPAddress!
}

"""
Return response for deleteIPAddress mutation
"""
type IPAddressDeletePayload {
  """
  Deleted ip block type
  """
  deletedID: ID!
}

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.3"
    import: ["@key", "@interfaceObject", "@external", "@shareable"]
  )

"""
IPAddressable provides an interface for determining if a node can have IP addresses attached to it
"""
type IPAddressable @key(fields: "id") @interfaceObject {
  id: ID!
  """
  ipAddresses returns all the ip addresses attached to the node
  """
  ipAddresses: [IPAddress]! @goField(forceResolver: true)
}

extend type IPAddress {
  """
  node the ip address is attached to
  """
  node: IPAddressable!
}
