extend type Query {
    """
    Look up ip address by ID
    """
    ipAddress(
        """
        ID of the ip address
        """
        id: ID!
    ): IPAddress!
}

extend type Mutation{
    """
    Create a new ip address
    """
    createIPAddress(
        """
        values of the ip address
        """
        input: CreateIPAddressInput!
    ): IPAddressCreatePayload!
    """
    Update an existing ip address
    """
    updateIPAddress(
        """
        ID of the ip address
        """
        id: ID!
        """
        New values for the ip address
        """
        input: UpdateIPAddressInput!
    ): IPAddressUpdatePayload!
    """
    Delete an existing ip address
    """
    deleteIPAddress(
        """
        ID of the ip address
        """
        id: ID!
    ): IPAddressDeletePayload!
}

"""
Return response for createIPAddress mutation
"""
type IPAddressCreatePayload {
    """
    Created ip address
    """
    ipAddress: IPAddress!
}

"""
Return response for updateIPAddress mutation
"""
type IPAddressUpdatePayload {
    """
    Updated ip address
    """
    ipAddress: IPAddress!
}

"""
Return response for deleteIPAddress mutation
"""
type IPAddressDeletePayload {
    """
    Deleted ip address ID
    """
    deletedID: ID!
}

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.3"
    import: ["@key", "@interfaceObject", "@external", "@shareable"]
  )

"""
IPAddressable provides an interface for describing IP addresses attached to a node
"""
type IPAddressable @key(fields: "id") @interfaceObject {
  id: ID!
  """
  IPAddressable describes IP addresses attached to a node
  """
  IPAddresses: [IPAddress]! @goField(forceResolver: true)
}

extend type IPAddress {
  """
  IPAddresses that are associated with a given node
  """
  node: IPAddressable!
}
